From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sat, 22 Dec 2012 00:35:15 -0500
Subject: [PATCH] PlayerUseItem Event

This lets us control when an item is consumed and change the item.

diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index ee9e4521079137d7b72194e8789810e7a89b8e75..03316fb6e39a684735c80ec0397357ce43ee6eae 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -9,6 +9,7 @@ import net.minecraft.core.Direction;
 import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
 import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
+import io.papermc.paper.util.MCUtil;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
@@ -478,6 +479,15 @@ public class ServerPlayerGameMode {
     }
 
     public InteractionResult useItem(ServerPlayer player, Level world, ItemStack stack, InteractionHand hand) {
+        // Paper start - Allow control over if item should be consumed or not.
+        org.bukkit.inventory.EquipmentSlot bukkitHand = hand == InteractionHand.MAIN_HAND ? org.bukkit.inventory.EquipmentSlot.HAND : org.bukkit.inventory.EquipmentSlot.OFF_HAND;
+        org.bukkit.craftbukkit.inventory.CraftItemStack craftitem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(stack);
+        org.bukkit.craftbukkit.inventory.CraftItemStack origItemClone = craftitem.clone();
+        com.empireminecraft.customevents.PlayerUseItemEvent event = new com.empireminecraft.customevents.PlayerUseItemEvent(player.getBukkitEntity(), craftitem, bukkitHand);
+        if (!event.callEvent()) {
+            return InteractionResult.FAIL;
+        }
+        // Paper end
         if (this.gameModeForPlayer == GameType.SPECTATOR) {
             return InteractionResult.PASS;
         } else if (player.getCooldowns().isOnCooldown(stack.getItem())) {
@@ -485,23 +495,54 @@ public class ServerPlayerGameMode {
         } else {
             int i = stack.getCount();
             int j = stack.getDamageValue();
+            // Paper start
+            ItemStack orig = stack;
+            if (event.getTempItem() != null) {
+                stack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getTempItem());
+                player.setItemInHand(hand, stack);
+            }
+            // Paper end
             InteractionResultHolder<ItemStack> interactionresultwrapper = stack.use(world, player, hand);
             ItemStack itemstack1 = (ItemStack) interactionresultwrapper.getObject();
+            // Paper start - change order and redo lots of things here.
+            if (event.getTempItem() != null) {
+                // restore original item
+                player.setItemInHand(hand, itemstack1 = orig);
+            }
 
-            if (itemstack1 == stack && itemstack1.getCount() == i && itemstack1.getUseDuration(player) <= 0 && itemstack1.getDamageValue() == j) {
-                return interactionresultwrapper.getResult();
-            } else if (interactionresultwrapper.getResult() == InteractionResult.FAIL && itemstack1.getUseDuration(player) > 0 && !player.isUsingItem()) {
+            boolean isSame = itemstack1 == stack && itemstack1.getCount() == i && itemstack1.getUseDuration(player) <= 0 && itemstack1.getDamageValue() == j;
+            //if (itemstack1 == stack && itemstack1.getCount() == i && itemstack1.getUseDuration(player) <= 0 && itemstack1.getDamageValue() == j) {
+            //    return interactionresultwrapper.getResult();
+            // This was just a short circuit, always run post use on success
+            if (interactionresultwrapper.getResult() == InteractionResult.FAIL && itemstack1.getUseDuration(player) > 0 && !player.isUsingItem()) {
+                // if fail, abort - this is vanilla
                 return interactionresultwrapper.getResult();
             } else {
+                //if (stack != itemstack1) { // Paper - move down
+                //    player.setItemInHand(hand, itemstack1);
+                //}
+
+                org.bukkit.inventory.ItemStack craftNew = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemstack1);
+                com.destroystokyo.paper.event.player.PlayerPostUseItemEvent postUseItemEvent = new com.destroystokyo.paper.event.player.PlayerPostUseItemEvent(player.getBukkitEntity(), origItemClone, craftNew, bukkitHand);
+                postUseItemEvent.callEvent();
+
+                //noinspection ObjectEquality
+                if (craftNew != postUseItemEvent.getNewItem()) {
+                    // Use a different new item instead. Not good to do if its a "Hold to use item" FYI!
+                    itemstack1 = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(postUseItemEvent.getNewItem());
+                    isSame = false;
+                }
                 if (stack != itemstack1) {
                     player.setItemInHand(hand, itemstack1);
                 }
+                // Paper end
 
                 if (itemstack1.isEmpty()) {
                     player.setItemInHand(hand, ItemStack.EMPTY);
+                    isSame = false; // Paper
                 }
 
-                if (!player.isUsingItem()) {
+                if (itemstack1.isEmpty() || (!isSame && !player.isUsingItem())) { // Paper - add !isSame
                     player.inventoryMenu.sendAllDataToRemote();
                 }
 
@@ -518,6 +559,7 @@ public class ServerPlayerGameMode {
     public ItemStack interactItemStack;
     public InteractionResult useItemOn(ServerPlayer player, Level world, ItemStack stack, InteractionHand hand, BlockHitResult hitResult) {
         BlockPos blockposition = hitResult.getBlockPos();
+        org.bukkit.util.Vector hitVector = new org.bukkit.util.Vector(hitResult.getLocation().x, hitResult.getLocation().y, hitResult.getLocation().z); // Paper - Ensure last 3 floats line up as vector params
         BlockState iblockdata = world.getBlockState(blockposition);
         boolean cancelledBlock = false;
         boolean cancelledItem = false; // Paper - correctly handle items on cooldown
@@ -575,7 +617,7 @@ public class ServerPlayerGameMode {
             boolean flag = !player.getMainHandItem().isEmpty() || !player.getOffhandItem().isEmpty();
             boolean flag1 = player.isSecondaryUseActive() && flag;
             ItemStack itemstack1 = stack.copy();
-            InteractionResult enuminteractionresult;
+            InteractionResult enuminteractionresult = null; // Paper
 
             if (!flag1) {
                 ItemInteractionResult iteminteractionresult = iblockdata.useItemOn(player.getItemInHand(hand), world, player, hand, hitResult);
@@ -595,22 +637,45 @@ public class ServerPlayerGameMode {
             }
 
             if (!stack.isEmpty() && !this.interactResult) { // add !interactResult SPIGOT-764
+                // Paper start - Allow control over if item should be consumed or not.
+                org.bukkit.inventory.EquipmentSlot bukkitHand = hand == InteractionHand.MAIN_HAND ? org.bukkit.inventory.EquipmentSlot.HAND : org.bukkit.inventory.EquipmentSlot.OFF_HAND;
+                org.bukkit.craftbukkit.inventory.CraftItemStack craftitem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(stack);
+                com.empireminecraft.customevents.PlayerPlaceItemAtEvent eventPlace = new com.empireminecraft.customevents.PlayerPlaceItemAtEvent(
+                    player.getBukkitEntity(), craftitem,
+                    MCUtil.toLocation(world, blockposition),
+                    org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(hitResult.getDirection()),
+                    hitVector, bukkitHand);
+                if (!eventPlace.callEvent()) {
+                    return InteractionResult.FAIL;
+                }
+                int i = stack.getCount(); // Paper - moved from below before temporary items
+                ItemStack orig = stack;
+                if (eventPlace.getTempItem() != null) {
+                    stack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(eventPlace.getTempItem());
+                    player.setItemInHand(hand, stack);
+                }
                 UseOnContext itemactioncontext = new UseOnContext(player, hand, hitResult);
-
-                if (this.isCreative()) {
-                    int i = stack.getCount();
-
-                    enuminteractionresult = stack.useOn(itemactioncontext);
+                InteractionResult enuminteractionresult1 = stack.useOn(itemactioncontext);
+                if (eventPlace.getTempItem() != null) {
+                    player.setItemInHand(hand, stack = orig);
+                }
+                if (!eventPlace.getConsumeItem() || this.isCreative()) {
                     stack.setCount(i);
-                } else {
-                    enuminteractionresult = stack.useOn(itemactioncontext);
                 }
-
-                if (enuminteractionresult.consumesAction()) {
+                if (enuminteractionresult != InteractionResult.FAIL) {
+                    com.destroystokyo.paper.event.player.PlayerPostPlaceItemAtEvent postUseItemEvent =
+                        new com.destroystokyo.paper.event.player.PlayerPostPlaceItemAtEvent(player.getBukkitEntity(), craftitem,
+                            MCUtil.toLocation(world, blockposition),
+                            org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(hitResult.getDirection()),
+                            hitVector, bukkitHand);
+                    postUseItemEvent.callEvent();
+                }
+                if (enuminteractionresult1.consumesAction()) {
                     CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(player, blockposition, itemstack1);
                 }
 
-                return enuminteractionresult;
+                return enuminteractionresult1;
+                // Paper end
             } else {
                 // Paper start - Properly cancel usable items; Cancel only if cancelled + if the interact result is different from default response
                 if (this.interactResult && this.interactResult != cancelledItem) {
