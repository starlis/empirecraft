From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Tue, 29 Dec 2020 01:32:45 -0600
Subject: [PATCH] Fake Player API


diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Server.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Server.java
new file mode 100644
index 0000000000000000000000000000000000000000..8dd7b8ddcddb2ad2f66a1e76eca6dfd5b5516fde
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Server.java
@@ -0,0 +1,35 @@
+package com.empireminecraft.api;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.google.common.collect.Maps;
+import net.kyori.adventure.text.Component;
+import org.bukkit.GameMode;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nullable;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+
+public class CraftEAPI_Server implements EAPI_Server {
+    public final Map<UUID, FakePlayer> fakePlayerMap = Maps.newHashMap();
+
+    @Nullable
+    @Override
+    public FakePlayer getFakePlayer(@NotNull UUID uuid) {
+        return fakePlayerMap.get(uuid);
+    }
+
+    @NotNull
+    @Override
+    public FakePlayer createFakePlayer(@NotNull PlayerProfile profile, int ping, @NotNull GameMode gameMode, @NotNull Component playerListName) throws IllegalArgumentException {
+        return new CraftFakePlayer(profile, ping, gameMode, playerListName);
+    }
+
+    @NotNull
+    @Override
+    public Set<FakePlayer> getJoinedFakePlayers() {
+        return Set.copyOf(fakePlayerMap.values());
+    }
+
+}
diff --git a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
index 7b295bc869fd8fac878fd25fdcd3f03422fc8e63..84e34cf15b7a1f59ac63e6ebdf37752a6e6acda2 100644
--- a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
+++ b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
@@ -31,6 +31,10 @@ public final class CraftEmpireAPI extends API {
     static {
         entity = new CraftEAPI_Entity();
         misc = new CraftEAPI_Misc();
+        server = new CraftEAPI_Server();
     }
 
+    public static CraftEAPI_Server getServer() {
+        return (CraftEAPI_Server) server;
+    }
 }
diff --git a/src/main/java/com/empireminecraft/api/CraftFakePlayer.java b/src/main/java/com/empireminecraft/api/CraftFakePlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..f85ec2cae6c09116c08f987a7818e16268a952d3
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/CraftFakePlayer.java
@@ -0,0 +1,151 @@
+package com.empireminecraft.api;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.empireminecraft.customevents.FakePlayerJoinEvent;
+import com.empireminecraft.customevents.FakePlayerQuitEvent;
+import net.kyori.adventure.text.Component;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoRemovePacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Action;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.GameMode;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.EnumSet;
+import java.util.List;
+import java.util.UUID;
+
+public class CraftFakePlayer implements FakePlayer {
+    private final PlayerProfile profile;
+    // Use uuid field to ensure the PlayerProfile is not altered to change the UUID.
+    private final UUID uuid;
+    public int ping;
+    public GameMode gameMode;
+    public Component playerListName;
+
+    public CraftFakePlayer(@NotNull PlayerProfile profile, int ping, @NotNull GameMode gameMode, @NotNull Component playerListName) throws IllegalArgumentException {
+        this.profile = profile;
+        if (profile.getId() == null) {
+            throw new IllegalArgumentException("PlayerProfile does not contain a valid id");
+        }
+        this.uuid = profile.getId();
+        this.ping = ping;
+        this.gameMode = gameMode;
+        this.playerListName = playerListName;
+    }
+
+    @NotNull
+    @Override
+    public PlayerProfile getProfile() {
+        return profile;
+    }
+
+    @NotNull
+    @Override
+    public Component getPlayerListName() {
+        return playerListName;
+    }
+
+    @Override
+    public int getPing() {
+        return ping;
+    }
+
+    @NotNull
+    @Override
+    public GameMode getGameMode() {
+        return gameMode;
+    }
+
+    @NotNull
+    @Override
+    public UUID getUniqueId() {
+        return uuid;
+    }
+
+    @Override
+    public void join() {
+        UUID uuid = this.getUniqueId();
+        if (this.isJoined()) {
+            return;
+        }
+        new FakePlayerJoinEvent(this).callEvent();
+        CraftEmpireAPI.getServer().fakePlayerMap.put(uuid, this);
+
+        var packet = new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_GAME_MODE, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LISTED, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME), this);
+        for (ServerPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+            if (entityPlayer.getBukkitEntity().canSee(this)) {
+                entityPlayer.connection.send(packet);
+            }
+        }
+    }
+
+    @Override
+    public void quit() {
+        UUID uuid = this.getUniqueId();
+        if (!this.isJoined()) {
+            return;
+        }
+        new FakePlayerQuitEvent(this).callEvent();
+        CraftEmpireAPI.getServer().fakePlayerMap.remove(uuid);
+
+
+        var packet = new ClientboundPlayerInfoRemovePacket(List.of(this.getUniqueId()));
+        for (ServerPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+            if (entityPlayer.getBukkitEntity().canSee(this)) {
+                entityPlayer.connection.send(packet);
+            } else {
+                entityPlayer.getBukkitEntity().hiddenFakePlayers.remove(uuid);
+            }
+        }
+    }
+
+    @Override
+    public void setPing(int ping, boolean update) {
+        this.ping = ping;
+        if (update) {
+            this.sendUpdatePackets(Action.UPDATE_LATENCY);
+        }
+    }
+
+    @Override
+    public void setGameMode(@NotNull GameMode gameMode, boolean update) {
+        this.gameMode = gameMode;
+        if (update) {
+            this.sendUpdatePackets(Action.UPDATE_GAME_MODE);
+        }
+    }
+
+    @Override
+    public void setPlayerListName(@NotNull Component playerListName, boolean update) {
+        this.playerListName = playerListName;
+        if (update) {
+            this.sendUpdatePackets(Action.UPDATE_DISPLAY_NAME);
+        }
+    }
+
+    @Override
+    public void update() {
+        this.sendUpdatePackets(Action.UPDATE_LATENCY);
+        this.sendUpdatePackets(Action.UPDATE_GAME_MODE);
+        this.sendUpdatePackets(Action.UPDATE_DISPLAY_NAME);
+    }
+
+    private void sendUpdatePackets(@NotNull Action action) {
+        if (this.isJoined()) {
+            var packet = new ClientboundPlayerInfoUpdatePacket(action, this);
+            for (ServerPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+                if (entityPlayer.getBukkitEntity().canSee(this)) {
+                    entityPlayer.connection.send(packet);
+                }
+            }
+        }
+    }
+
+    @Override
+    public boolean isJoined() {
+        return CraftEmpireAPI.getServer().fakePlayerMap.containsKey(this.getUniqueId());
+    }
+
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
index 9ccca41bf23efadba5329cc584bbcdcacbe09a92..d83094471833887519862914ce8e70fbf2127b98 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
@@ -1,6 +1,8 @@
 package net.minecraft.network.protocol.game;
 
+import com.empireminecraft.api.FakePlayer;
 import com.google.common.base.MoreObjects;
+import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import java.util.Collection;
 import java.util.EnumSet;
@@ -8,6 +10,8 @@ import java.util.List;
 import java.util.Objects;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.adventure.PaperAdventure;
 import net.minecraft.Optionull;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.RegistryFriendlyByteBuf;
@@ -28,6 +32,26 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
     private final EnumSet<ClientboundPlayerInfoUpdatePacket.Action> actions;
     private final List<ClientboundPlayerInfoUpdatePacket.Entry> entries;
 
+    // EMC start
+    public ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.Action action, FakePlayer... fakePlayers) {
+        this(EnumSet.of(action), fakePlayers);
+    }
+    public ClientboundPlayerInfoUpdatePacket(EnumSet<ClientboundPlayerInfoUpdatePacket.Action> actions, FakePlayer... fakePlayers) {
+        this.actions = actions;
+        this.entries = Lists.newArrayListWithCapacity(fakePlayers.length);
+        for (FakePlayer fakePlayer : fakePlayers) {
+            fakePlayer.getUniqueId();
+            EntryBuilder builder = new EntryBuilder(fakePlayer.getUniqueId());
+            builder.profile = com.destroystokyo.paper.profile.CraftPlayerProfile.asAuthlib(fakePlayer.getProfile());
+            builder.listed = true;
+            builder.latency = fakePlayer.getPing();
+            builder.gameMode = GameType.byId(fakePlayer.getGameMode().getValue());
+            builder.displayName = PaperAdventure.asVanilla(fakePlayer.getPlayerListName());
+            //TODO: boolean listed, @Nullable RemoteChatSession.Data chatSession
+            this.entries.add(builder.build());
+        }
+    }
+    // EMC end
     public ClientboundPlayerInfoUpdatePacket(EnumSet<ClientboundPlayerInfoUpdatePacket.Action> actions, Collection<ServerPlayer> players) {
         this.actions = actions;
         this.entries = players.stream().map(ClientboundPlayerInfoUpdatePacket.Entry::new).toList();
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 8f9df99e01f2c9cb487fe5087a6330e27ea14a20..68a1f8aeb14b83f64faa9632dfbb1c55db2e00a9 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1,6 +1,8 @@
 package net.minecraft.server.players;
 
 import co.aikar.timings.MinecraftTimings;
+import com.empireminecraft.api.CraftEmpireAPI;
+import com.empireminecraft.api.FakePlayer;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -359,6 +361,13 @@ public abstract class PlayerList {
         }
         // CraftBukkit end
 
+        // EMC start
+        for (FakePlayer fakePlayer : CraftEmpireAPI.getServer().fakePlayerMap.values()) {
+            if (player.getBukkitEntity().canSee(fakePlayer)) {
+                player.connection.send(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER, ClientboundPlayerInfoUpdatePacket.Action.INITIALIZE_CHAT, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_GAME_MODE, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LISTED, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME), fakePlayer));
+            }
+        }
+        // EMC end
         // CraftBukkit start - sendAll above replaced with this loop
         ClientboundPlayerInfoUpdatePacket packet = ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(player)); // Paper - Add Listing API for Player
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index aa0116baa5c7af583f4c13cab54a85425a73c6fd..0c7fd02c4d5d40e3800b93b246b6b9eaa938d3ef 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.empireminecraft.api.CraftEmpireAPI;
+import com.empireminecraft.api.FakePlayer;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
@@ -20,6 +22,7 @@ import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
+import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
@@ -2304,7 +2307,67 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
     // Paper end - Add Listing API for Player
+    // EMC start
+    public final Map<UUID, Set<WeakReference<Plugin>>> hiddenFakePlayers = new HashMap<>();
+    @Override
+    public boolean canSee(@NotNull FakePlayer fakePlayer) {
+        return !hiddenFakePlayers.containsKey(fakePlayer.getUniqueId());
+    }
+    @Override
+    public void hideFakePlayer(@NotNull Plugin plugin, @NotNull FakePlayer fakePlayer) {
+        UUID fakeUUID = fakePlayer.getUniqueId();
+        if  (fakeUUID.equals(this.getUniqueId())) {
+            return;
+        }
+
+        Set<WeakReference<Plugin>> hidingPlugins = hiddenFakePlayers.get(fakeUUID);
+        if (hidingPlugins != null) {
+            // Some plugins are already hiding the player. Just mark that this
+            // plugin wants the player hidden too and end.
+            hidingPlugins.add(getPluginWeakReference(plugin));
+            return;
+        }
+        hidingPlugins = new HashSet<>();
+        hidingPlugins.add(getPluginWeakReference(plugin));
+        hiddenFakePlayers.put(fakeUUID, hidingPlugins);
+
+        if (CraftEmpireAPI.getServer().fakePlayerMap.containsKey(fakeUUID)) {
+            getHandle().connection.send(new ClientboundPlayerInfoRemovePacket(List.of(fakePlayer.getUniqueId())));
+        }
+    }
+    @Override
+    public void showFakePlayer(@NotNull Plugin plugin, @NotNull FakePlayer fakePlayer) {
+        UUID fakeUUID = fakePlayer.getUniqueId();
+        if  (fakeUUID.equals(this.getUniqueId())) {
+            return;
+        }
 
+        Set<WeakReference<Plugin>> hidingPlugins = hiddenFakePlayers.get(fakeUUID);
+        if (hidingPlugins == null) {
+            return; // Player isn't hidden
+        }
+        hidingPlugins.remove(getPluginWeakReference(plugin));
+        if (!hidingPlugins.isEmpty()) {
+            return; // Some other plugins still want the player hidden
+        }
+        hiddenFakePlayers.remove(fakeUUID);
+        if (CraftEmpireAPI.getServer().fakePlayerMap.containsKey(fakeUUID)) {
+            getHandle().connection.send(new ClientboundPlayerInfoUpdatePacket(
+                EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER, ClientboundPlayerInfoUpdatePacket.Action.INITIALIZE_CHAT, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_GAME_MODE, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LISTED, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME), fakePlayer));
+        }
+    }
+    @Override
+    public Set<FakePlayer> getHiddenFakePlayers() {
+        Set<FakePlayer> ret = new HashSet<>();
+        for (UUID uuid : hiddenFakePlayers.keySet()) {
+            FakePlayer fakePlayer = CraftEmpireAPI.server.getFakePlayer(uuid);
+            if (fakePlayer != null) {
+                ret.add(fakePlayer);
+            }
+        }
+        return java.util.Collections.unmodifiableSet(ret);
+    }
+    // EMC end
     @Override
     public Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
