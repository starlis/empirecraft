From 5a842b5a8997c94d54fa3e84469dc866d29f2e92 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 17 May 2015 19:11:01 -0400
Subject: [PATCH] Don't break Hanging Entities if neighbor chunks unloaded

---
 src/main/java/net/minecraft/server/Chunk.java      | 59 ++++++++++++++++++++++
 .../java/net/minecraft/server/EntityHanging.java   |  1 +
 2 files changed, 60 insertions(+)

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 5d50643..6447786 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -52,6 +52,34 @@ public class Chunk implements IChunkAccess {
     private final ChunkCoordIntPair loc;
     private volatile boolean x;
 
+    // EMC Start - Reimplement Removed CraftBukkit Logic
+    public long chunkKey;
+    private int neighbors = 0x1 << 12;
+    public boolean areNeighborsLoaded(final int radius) {
+        switch (radius) {
+            case 2:
+                return this.neighbors == Integer.MAX_VALUE >> 6;
+            case 1:
+                final int mask =
+                        //       x        z   offset          x        z   offset          x         z   offset
+                        (0x1 << (1 * 5 +  1 + 12)) | (0x1 << (0 * 5 +  1 + 12)) | (0x1 << (-1 * 5 +  1 + 12)) |
+                        (0x1 << (1 * 5 +  0 + 12)) | (0x1 << (0 * 5 +  0 + 12)) | (0x1 << (-1 * 5 +  0 + 12)) |
+                        (0x1 << (1 * 5 + -1 + 12)) | (0x1 << (0 * 5 + -1 + 12)) | (0x1 << (-1 * 5 + -1 + 12));
+                return (this.neighbors & mask) == mask;
+            default:
+                throw new UnsupportedOperationException(String.valueOf(radius));
+        }
+    }
+
+    public void setNeighborLoaded(final int x, final int z) {
+        this.neighbors |= 0x1 << (x * 5 + 12 + z);
+    }
+
+    public void setNeighborUnloaded(final int x, final int z) {
+        this.neighbors &= ~(0x1 << (x * 5 + 12 + z));
+    }
+    // EMC end
+
     public Chunk(World world, ChunkCoordIntPair chunkcoordintpair, BiomeBase[] abiomebase) {
         this(world, chunkcoordintpair, abiomebase, ChunkConverter.a, TickListEmpty.b(), TickListEmpty.b(), 0L, (ChunkSection[]) null, (Consumer) null);
     }
@@ -132,6 +160,7 @@ public class Chunk implements IChunkAccess {
 
         // CraftBukkit start
         this.bukkitChunk = new org.bukkit.craftbukkit.CraftChunk(this);
+        this.chunkKey = loc.pair(); // EMC
     }
 
     public org.bukkit.Chunk bukkitChunk;
@@ -645,6 +674,21 @@ public class Chunk implements IChunkAccess {
              */
             server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(this.bukkitChunk, this.needsDecoration));
 
+            // EMC start - Update neighbor counts (Reimplementation of Removed CraftBukkit Logic)
+            for (int x = -2; x < 3; x++) {
+                for (int z = -2; z < 3; z++) {
+                    if (x == 0 && z == 0) {
+                        continue;
+                    }
+
+                    Chunk neighbor = getWorld().getChunkIfLoaded(loc.x + x, loc.z + z);
+                    if (neighbor != null) {
+                        neighbor.setNeighborLoaded(-x, -z);
+                        setNeighborLoaded(x, z);
+                    }
+                }
+            }
+            // EMC end
             if (this.needsDecoration) {
                 try (co.aikar.timings.Timing ignored = this.world.timings.syncChunkLoadPopulateTimer.startTiming()) { // Paper
                 this.needsDecoration = false;
@@ -677,6 +721,21 @@ public class Chunk implements IChunkAccess {
         server.getPluginManager().callEvent(unloadEvent);
         // note: saving can be prevented, but not forced if no saving is actually required
         this.mustNotSave = !unloadEvent.isSaveChunk();
+        // EMC start - Update neighbor counts (Reimplementation of Removed CraftBukkit Logic)
+        for (int x = -2; x < 3; x++) {
+            for (int z = -2; z < 3; z++) {
+                if (x == 0 && z == 0) {
+                    continue;
+                }
+
+                Chunk neighbor = this.world.getChunkIfLoaded(loc.x + x, loc.z + z);
+                if (neighbor != null) {
+                    neighbor.setNeighborUnloaded(-x, -z);
+                    this.setNeighborUnloaded(x, z);
+                }
+            }
+        }
+        // EMC end
     }
     // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/EntityHanging.java b/src/main/java/net/minecraft/server/EntityHanging.java
index 2b4a849..d0d58f8 100644
--- a/src/main/java/net/minecraft/server/EntityHanging.java
+++ b/src/main/java/net/minecraft/server/EntityHanging.java
@@ -127,6 +127,7 @@ public abstract class EntityHanging extends Entity {
     }
 
     public boolean survives() {
+        if (!world.getChunkAt((int) locX >> 4, (int) locZ >> 4).areNeighborsLoaded(1)) return true; // EMC
         if (!this.world.getCubes(this)) {
             return false;
         } else {
-- 
2.7.4

