From 807109830296ffc643abf33fd303ff15e4446f22 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 7 Oct 2015 20:42:59 -0400
Subject: [PATCH] Optimize Entity and Tile Entity Removal

Java's implementation of List.removeAll is extremely slow. This is
currently causing lots of TPS loss when lots of chunk unload activity
occurs, as the process iterates the removal list for every entry in the
source list, resulting in O(n^2) performance.

This change will switch the process to instead iterate over the
removal list, and marking a boolean that its removed.

Then, we then iterate the source list and use a compaction technique
that skips any object marked for removal.

After all live objects are compacted down, we do a range
removal to clear out any removed objects at the end of the current list.

This gives us O(n) performance and a much cheaper overall operation.

Compaction technique was originally used by CyberTiger in a different
implementation.

Finally, we remove MOST single .remove() calls, and run a 2nd compaction
after ticking in order to remove the singles.

foo
---
 src/main/java/net/minecraft/server/Entity.java     |  7 +-
 src/main/java/net/minecraft/server/TileEntity.java |  7 +-
 src/main/java/net/minecraft/server/World.java      | 12 ++--
 .../java/org/bukkit/craftbukkit/CraftWorld.java    |  8 +--
 .../org/spigotmc/OptimizedRemoveAllArrayList.java  | 78 ++++++++++++++++++++++
 5 files changed, 102 insertions(+), 10 deletions(-)
 create mode 100644 src/main/java/org/spigotmc/OptimizedRemoveAllArrayList.java

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 606c315..d00ff18 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -33,7 +33,12 @@ import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.plugin.PluginManager;
 // CraftBukkit end
 
-public abstract class Entity implements ICommandListener {
+// Spigot start
+public abstract class Entity implements ICommandListener, org.spigotmc.OptimizedRemoveAllArrayList.Marker {
+    private boolean needsRemoved = false;
+    public boolean isToBeRemoved() { return needsRemoved; }
+    public void setRemovalState(boolean removalState) { needsRemoved = removalState; }
+    // Spigot end
 
     // CraftBukkit start
     public com.empireminecraft.metaapi.MetaApi.MetaMap metaMap = null; // EMC
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index 741f86c..2b46890 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -10,7 +10,12 @@ import org.spigotmc.timings.SpigotTimings; // Spigot
 import org.spigotmc.timings.Timing; // Spigot
 import org.bukkit.inventory.InventoryHolder; // CraftBukkit
 
-public abstract class TileEntity {
+// Spigot start
+public abstract class TileEntity implements org.spigotmc.OptimizedRemoveAllArrayList.Marker {
+    private boolean needsRemoved = false;
+    public boolean isToBeRemoved() { return needsRemoved; }
+    public void setRemovalState(boolean removalState) { needsRemoved = removalState; }
+    // Spigot end
 
     public Timing tickTimer = SpigotTimings.getTileEntityTimings(this); // Spigot
     private static final Logger a = LogManager.getLogger();
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index f45b016..5f88fb1 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -37,7 +37,7 @@ public abstract class World implements IBlockAccess {
     private int a = 63;
     protected boolean e;
     // Spigot start - guard entity list from removals
-    public final List<Entity> entityList = new java.util.ArrayList<Entity>()
+    public final List<Entity> entityList = new org.spigotmc.OptimizedRemoveAllArrayList<Entity>()
     {
         @Override
         public Entity remove(int index)
@@ -64,7 +64,7 @@ public abstract class World implements IBlockAccess {
     // Spigot end
     protected final List<Entity> g = Lists.newArrayList();
     // public final List<TileEntity> h = Lists.newArrayList(); // Spigot - Unused List
-    public final List<TileEntity> tileEntityList = Lists.newArrayList();
+    public final List<TileEntity> tileEntityList = new org.spigotmc.OptimizedRemoveAllArrayList<TileEntity>(); // Spigot
     private final List<TileEntity> b = Lists.newArrayList();
     private final List<TileEntity> c = Lists.newArrayList();
     public final List<EntityHuman> players = Lists.newArrayList();
@@ -1477,13 +1477,14 @@ public abstract class World implements IBlockAccess {
                 }
 
                 guardEntityList = false; // Spigot
-                this.entityList.remove(this.tickPosition--); // CraftBukkit - Use field for loop variable
+                this.entityList.remove(entity); // CraftBukkit - Use field for loop variable // EMC
                 guardEntityList = true; // Spigot
                 this.b(entity);
             }
 
             this.methodProfiler.b();
         }
+        this.entityList.removeAll(null); // EMC
         guardEntityList = false; // Spigot
 
         timings.entityTick.stopTiming(); // Spigot
@@ -1545,13 +1546,14 @@ public abstract class World implements IBlockAccess {
 
             if (tileentity.x()) {
                 tilesThisCycle--;
-                this.tileEntityList.remove(tileTickPosition--);
+                this.tileEntityList.remove(tileentity); // EMC
                 // this.h.remove(tileentity); // Spigot - unused list
                 if (this.isLoaded(tileentity.getPosition())) {
                     this.getChunkAtWorldCoords(tileentity.getPosition()).e(tileentity.getPosition());
                 }
             }
         }
+        this.tileEntityList.removeAll(null); // EMC
 
         timings.tileEntityTick.stopTiming(); // Spigot
         timings.tileEntityPending.startTiming(); // Spigot
@@ -2571,6 +2573,7 @@ public abstract class World implements IBlockAccess {
 
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
+            if (entity.isToBeRemoved()) { continue; } // Spigot
 
             if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply((T) entity)) { // CraftBukkit - fix decompile error
                 arraylist.add(entity);
@@ -2655,6 +2658,7 @@ public abstract class World implements IBlockAccess {
 
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
+            if (entity.isToBeRemoved()) { continue; } // Spigot
             // CraftBukkit start - Split out persistent check, don't apply it to special persistent mobs
             if (entity instanceof EntityInsentient) {
                 EntityInsentient entityinsentient = (EntityInsentient) entity;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index d264d92..d786328 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -686,7 +686,7 @@ public class CraftWorld implements World {
                 Entity bukkitEntity = mcEnt.getBukkitEntity();
 
                 // Assuming that bukkitEntity isn't null
-                if (bukkitEntity != null) {
+                if (bukkitEntity != null && !mcEnt.isToBeRemoved()) { // Spigot
                     list.add(bukkitEntity);
                 }
             }
@@ -704,7 +704,7 @@ public class CraftWorld implements World {
                 Entity bukkitEntity = mcEnt.getBukkitEntity();
 
                 // Assuming that bukkitEntity isn't null
-                if (bukkitEntity != null && bukkitEntity instanceof LivingEntity) {
+                if (bukkitEntity != null && bukkitEntity instanceof LivingEntity && !mcEnt.isToBeRemoved()) { // Spigot
                     list.add((LivingEntity) bukkitEntity);
                 }
             }
@@ -727,7 +727,7 @@ public class CraftWorld implements World {
             if (entity instanceof net.minecraft.server.Entity) {
                 Entity bukkitEntity = ((net.minecraft.server.Entity) entity).getBukkitEntity();
 
-                if (bukkitEntity == null) {
+                if (bukkitEntity == null || ((net.minecraft.server.Entity) entity).isToBeRemoved()) { // Spigot
                     continue;
                 }
 
@@ -749,7 +749,7 @@ public class CraftWorld implements World {
             if (entity instanceof net.minecraft.server.Entity) {
                 Entity bukkitEntity = ((net.minecraft.server.Entity) entity).getBukkitEntity();
 
-                if (bukkitEntity == null) {
+                if (bukkitEntity == null || ((net.minecraft.server.Entity) entity).isToBeRemoved()) {
                     continue;
                 }
 
diff --git a/src/main/java/org/spigotmc/OptimizedRemoveAllArrayList.java b/src/main/java/org/spigotmc/OptimizedRemoveAllArrayList.java
new file mode 100644
index 0000000..f005c9c
--- /dev/null
+++ b/src/main/java/org/spigotmc/OptimizedRemoveAllArrayList.java
@@ -0,0 +1,78 @@
+package org.spigotmc;
+
+
+import org.spigotmc.OptimizedRemoveAllArrayList.Marker;
+
+import java.util.ArrayList;
+import java.util.Collection;
+
+/**
+ * Improved algorithim for bulk removing entries from a list
+ *
+ * WARNING: This system only works on Identity Based lists,
+ * unlike traditional .removeAll() that operates on object equality.
+ */
+public class OptimizedRemoveAllArrayList <T extends Marker> extends ArrayList<T> {
+    public OptimizedRemoveAllArrayList(int initialCapacity) {
+        super(initialCapacity);
+    }
+
+    public OptimizedRemoveAllArrayList() {
+    }
+
+    public OptimizedRemoveAllArrayList(Collection<? extends T> c) {
+        super(c);
+    }
+
+    public OptimizedRemoveAllArrayList<T> clone() {
+        return new OptimizedRemoveAllArrayList<T>(this);
+    }
+
+    @Override
+    public boolean addAll(Collection<? extends T> c) {
+        for (T t : c) {
+            t.setRemovalState(false);
+        }
+        return super.addAll(c);
+    }
+
+    @Override
+    public boolean add(T t) {
+        t.setRemovalState(false);
+        return super.add(t);
+    }
+
+    @Override
+    public boolean remove(Object o) {
+        ((Marker) o).setRemovalState(true);
+        return true;
+    }
+
+    @Override
+    public boolean removeAll(Collection<?> c) {
+        if (c != null) {
+            for (Object o : c) {
+                ((Marker) o).setRemovalState(true);
+            }
+        }
+
+        int size = size();
+        int insertAt = 0;
+
+        for (int i = 0; i < size; i++) {
+            T el = get(i);
+
+            if (el != null && !el.isToBeRemoved()) {
+                set(insertAt++, el);
+            }
+        }
+        subList(insertAt, size).clear();
+
+        return size() != size;
+    }
+
+    public interface Marker {
+        boolean isToBeRemoved();
+        void setRemovalState(boolean removalState);
+    }
+}
-- 
2.6.2

