From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 6 Dec 2016 22:19:45 -0500
Subject: [PATCH] Attributes API

---
 .../empireminecraft/api/CraftEmpireAPI.java   |   2 +
 .../api/meta/CraftEAPI_Attributes.java        | 136 ++++++++++++++++++
 .../minecraft/server/AttributeInstance.java   |   2 +-
 .../minecraft/server/AttributeMapBase.java    |   4 +-
 .../minecraft/server/AttributesAccessor.java  |  48 +++++++
 .../minecraft/server/EntityInsentient.java    |   1 +
 .../net/minecraft/server/EntityLiving.java    |   1 +
 .../minecraft/server/GenericAttributes.java   |   1 +
 .../server/PathfinderGoalTarget.java          |   2 +-
 9 files changed, 193 insertions(+), 4 deletions(-)
 create mode 100644 src/main/java/com/empireminecraft/api/meta/CraftEAPI_Attributes.java
 create mode 100644 src/main/java/net/minecraft/server/AttributesAccessor.java

diff --git a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
index f3c9419c8148e389f7d9f2e24a8664b1cb2bbfde..9b0eb03deacba2fa6657a7371e9fa7317f785d3f 100644
--- a/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
+++ b/src/main/java/com/empireminecraft/api/CraftEmpireAPI.java
@@ -23,6 +23,7 @@
 
 package com.empireminecraft.api;
 
+import com.empireminecraft.api.meta.CraftEAPI_Attributes;
 import com.empireminecraft.api.meta.CraftEAPI_Meta;
 
 public final class CraftEmpireAPI extends API {
@@ -34,6 +35,7 @@ public final class CraftEmpireAPI extends API {
         entity = new CraftEAPI_Entity();
         misc = new CraftEAPI_Misc();
         meta = new CraftEAPI_Meta();
+        attributes = new CraftEAPI_Attributes();
     }
 
 }
diff --git a/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Attributes.java b/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Attributes.java
new file mode 100644
index 0000000000000000000000000000000000000000..00abcfe2b9d0b6e0d948ae7d1a887a4a300b219a
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/meta/CraftEAPI_Attributes.java
@@ -0,0 +1,136 @@
+/*
+ * Copyright (c) 2016 Starlis LLC / Daniel Ennis (Aikar) - MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.empireminecraft.api.meta;
+
+import com.empireminecraft.api.attributes.Attribute;
+import com.empireminecraft.api.attributes.AttributeSlot;
+import com.empireminecraft.api.attributes.EAPI_Attributes;
+import com.empireminecraft.api.attributes.Operation;
+import net.minecraft.server.AttributeInstance;
+import net.minecraft.server.AttributeModifier;
+import net.minecraft.server.AttributesAccessor;
+import net.minecraft.server.EntityLiving;
+import net.minecraft.server.GenericAttributes;
+import net.minecraft.server.IAttribute;
+import net.minecraft.server.NBTBase;
+import net.minecraft.server.NBTTagCompound;
+import net.minecraft.server.NBTTagList;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.Iterator;
+import java.util.Objects;
+
+public class CraftEAPI_Attributes implements EAPI_Attributes {
+
+    public void setAttribute(AttributeSlot slot, ItemStack item, Attribute attr, Operation operation, double val) {
+        final CraftItemStack craftStack = CraftItemStack.asCraftCopy(item);
+        final NBTTagList attributes = getAttributes(craftStack.getHandle());
+        final NBTTagCompound attributeData = createAttribute(slot, attr, operation, val);
+        removeAttribute(attributes, attr, slot);
+
+        attributes.add(attributeData);
+        item.setItemMeta(craftStack.getItemMeta());
+    }
+
+    public void removeAttribute(ItemStack item, Attribute attr, AttributeSlot slot) {
+        final CraftItemStack craftStack = CraftItemStack.asCraftCopy(item);
+        final NBTTagList attributes = getAttributes(craftStack.getHandle());
+        removeAttribute(attributes, attr, slot);
+        item.setItemMeta(craftStack.getItemMeta());
+    }
+
+
+    public boolean setAttribute(LivingEntity livingEntity, Attribute attr, double val) {
+        final EntityLiving entity = ((CraftLivingEntity) livingEntity).getHandle();
+        final IAttribute attributetype = AttributesAccessor.getAttribute(attr);
+        if (attributetype == null) {
+            throw new NullPointerException("Bad Attribute Type");
+        }
+        final AttributeInstance attribute = entity.getAttributeInstance(attributetype);
+        if (attribute != null) {
+            attribute.setValue(val);
+            return true;
+        }
+        return false;
+    }
+    public Double getAttribute(LivingEntity livingEntity, Attribute attr) {
+        final EntityLiving entity = ((CraftLivingEntity) livingEntity).getHandle();
+        final IAttribute attributetype = AttributesAccessor.getAttribute(attr);
+
+        if (attributetype == null) {
+            throw new NullPointerException("Bad Attribute Type");
+        }
+        final AttributeInstance attribute = entity.getAttributeInstance(attributetype);
+        if (attribute != null) {
+            return attribute.getBaseValue(); // Don't use attribute modifier version (getValue)
+        }
+        return attributetype.getDefault();
+    }
+
+
+    private static NBTTagCompound createAttribute(AttributeSlot slot, Attribute attr, Operation operation, double val) {
+        final String name = AttributesAccessor.getAttribute(attr).getName();
+        final AttributeModifier attributeModifier =
+            new AttributeModifier(attr.uuid, name, val, AttributeModifier.Operation.a(operation.getId()));
+        final NBTTagCompound attributeData = GenericAttributes.buildModifierCompound(attributeModifier);
+        attributeData.setString("AttributeName", name);
+        if (slot != null) {
+            attributeData.setString("Slot", slot.getSlotName());
+        }
+        return attributeData;
+    }
+
+    private static void removeAttribute(NBTTagList attributes, Attribute attr, AttributeSlot slot) {
+        final String name = AttributesAccessor.getAttribute(attr).getName();
+        for (Iterator<NBTBase> iterator = attributes.iterator(); iterator.hasNext(); ) {
+            NBTTagCompound nbtBase = (NBTTagCompound) iterator.next();
+            if (name.equals(nbtBase.getString("AttributeName")) &&
+                Objects.equals(slot != null ? slot.getSlotName() : "", nbtBase.getString("Slot"))) {
+                iterator.remove();
+            }
+        }
+    }
+
+    private static NBTTagList getAttributes(final net.minecraft.server.ItemStack nmsStack) {
+        NBTTagCompound parent;
+
+        if (nmsStack.tag == null) {
+            parent = nmsStack.tag = new NBTTagCompound();
+        } else {
+            parent = nmsStack.tag;
+        }
+
+        NBTTagList attributes;
+        if (parent.hasKeyOfType("AttributeModifiers", 9)) {
+            attributes = parent.getList("AttributeModifiers", 10);
+        } else {
+            attributes = new NBTTagList();
+            parent.set("AttributeModifiers", attributes);
+        }
+        return attributes;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/AttributeInstance.java b/src/main/java/net/minecraft/server/AttributeInstance.java
index 5df625b5d28ef24c01faa11ba29619f4bc88dc79..4a7fbefe88f32b914c31ee7c1f9cb96148769f63 100644
--- a/src/main/java/net/minecraft/server/AttributeInstance.java
+++ b/src/main/java/net/minecraft/server/AttributeInstance.java
@@ -16,7 +16,7 @@ public interface AttributeInstance {
 
     Set<AttributeModifier> getModifiers();
 
-    boolean a(AttributeModifier attributemodifier);
+    boolean a(AttributeModifier attributemodifier);default boolean configureAttribute(AttributeModifier attributeModifier) { return a(attributeModifier); } // EMC - OBF HELPER
 
     @Nullable
     AttributeModifier a(UUID uuid);
diff --git a/src/main/java/net/minecraft/server/AttributeMapBase.java b/src/main/java/net/minecraft/server/AttributeMapBase.java
index 9617be96539aec6f960ceca52f6a2445a198d977..f0bf0b84201af53c249e07c2bc48531497b9d51c 100644
--- a/src/main/java/net/minecraft/server/AttributeMapBase.java
+++ b/src/main/java/net/minecraft/server/AttributeMapBase.java
@@ -27,8 +27,8 @@ public abstract class AttributeMapBase {
         return (AttributeInstance) this.b.get(s);
     }
 
-    public AttributeInstance b(IAttribute iattribute) {
-        if (this.b.containsKey(iattribute.getName())) {
+    public AttributeInstance registerAttribute(IAttribute attr) { return b(attr); } public AttributeInstance b(IAttribute iattribute) { // EMC - OBF HELPER
+        if (false && this.b.containsKey(iattribute.getName())) { // EMC - we don't care
             throw new IllegalArgumentException("Attribute is already registered!");
         } else {
             AttributeInstance attributeinstance = this.c(iattribute);
diff --git a/src/main/java/net/minecraft/server/AttributesAccessor.java b/src/main/java/net/minecraft/server/AttributesAccessor.java
new file mode 100644
index 0000000000000000000000000000000000000000..9d4f099ff711ce2893c6544ec244f4e5ebbf14b0
--- /dev/null
+++ b/src/main/java/net/minecraft/server/AttributesAccessor.java
@@ -0,0 +1,48 @@
+package net.minecraft.server;
+
+import com.empireminecraft.api.API;
+import com.empireminecraft.api.attributes.Attribute;
+import com.google.common.collect.Maps;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Wither;
+
+import java.util.HashMap;
+
+public final class AttributesAccessor {
+    static final IAttribute targetRange = (new AttributeRanged(null, "generic.targetRange", 16.0D, 0.0D, 2048.0D)).a("Target Range");
+
+    private static final HashMap<Attribute, IAttribute> attributeMap = Maps.newHashMap();
+    static {
+        attributeMap.put(Attribute.TARGET_RANGE, targetRange);
+        attributeMap.put(Attribute.MAX_HEALTH, GenericAttributes.MAX_HEALTH);
+        attributeMap.put(Attribute.FOLLOW_RANGE, GenericAttributes.FOLLOW_RANGE);
+        attributeMap.put(Attribute.KNOCKBACK_RESISTANCE, GenericAttributes.KNOCKBACK_RESISTANCE);
+        attributeMap.put(Attribute.MOVEMENT_SPEED, GenericAttributes.MOVEMENT_SPEED);
+        attributeMap.put(Attribute.FLYING_SPEED, GenericAttributes.FLYING_SPEED);
+        attributeMap.put(Attribute.ATTACK_DAMAGE, GenericAttributes.ATTACK_DAMAGE);
+        attributeMap.put(Attribute.ATTACK_SPEED, GenericAttributes.ATTACK_SPEED);
+        attributeMap.put(Attribute.ARMOR, GenericAttributes.ARMOR);
+        attributeMap.put(Attribute.ARMOR_TOUGHNESS, GenericAttributes.ARMOR_TOUGHNESS);
+        attributeMap.put(Attribute.LUCK, GenericAttributes.LUCK);
+    }
+
+    private AttributesAccessor() {}
+
+    public static IAttribute getAttribute(Attribute attribute) {
+        return attributeMap.get(attribute);
+    }
+
+    public static void configureAttributes(EntityInsentient entity) {
+        entity.getAttributeInstance(targetRange)
+              .configureAttribute(new AttributeModifier("Random spawn bonus", entity.random.nextGaussian() * 0.05D, AttributeModifier.Operation.MULTIPLY_BASE));
+    }
+
+    public static void initializeAttributes(EntityLiving entity, AttributeMapBase map) {
+        if (entity instanceof EntityInsentient) {
+            map.registerAttribute(targetRange);
+            if (entity instanceof Wither) {
+                API.attributes.setAttribute(entity.getBukkitLivingEntity(), Attribute.TARGET_RANGE, 30D);
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 5aca7a9131787415fb2edba1ebec9601e8a56d3a..aacef40cec4c1111417d9bf8aa3f195b350387ca 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -1002,6 +1002,7 @@ public abstract class EntityInsentient extends EntityLiving {
     @Nullable
     public GroupDataEntity prepare(GeneratorAccess generatoraccess, DifficultyDamageScaler difficultydamagescaler, EnumMobSpawn enummobspawn, @Nullable GroupDataEntity groupdataentity, @Nullable NBTTagCompound nbttagcompound) {
         this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).addModifier(new AttributeModifier("Random spawn bonus", this.random.nextGaussian() * 0.05D, AttributeModifier.Operation.MULTIPLY_BASE));
+        AttributesAccessor.configureAttributes(this); // EMC
         if (this.random.nextFloat() < 0.05F) {
             this.p(true);
         } else {
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 5ad0aacf01d714c5036d5be602a17cde36e7745f..4246ed54195263c42b745c2c44609224035aef78 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -201,6 +201,7 @@ public abstract class EntityLiving extends Entity {
         this.getAttributeMap().b(GenericAttributes.MOVEMENT_SPEED);
         this.getAttributeMap().b(GenericAttributes.ARMOR);
         this.getAttributeMap().b(GenericAttributes.ARMOR_TOUGHNESS);
+        AttributesAccessor.initializeAttributes(this, attributeMap); // EMC
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index 469e293c257d530706986fc9ee90c27bde75280f..059d62c6bc8beb1423117a09b6d729465d1eb305 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -63,6 +63,7 @@ public class GenericAttributes {
         return nbttagcompound;
     }
 
+    public static NBTTagCompound buildModifierCompound(AttributeModifier attributeModifier) { return a(attributeModifier); } // EMC - OBF HELPER
     public static NBTTagCompound a(AttributeModifier attributemodifier) {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
 
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
index 02cdfb4344ddcead8f623a4e538033868d83c2e9..d72ed205110470432010314903879c5d60b15300 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTarget.java
@@ -69,7 +69,7 @@ public abstract class PathfinderGoalTarget extends PathfinderGoal {
     }
 
     protected double k() {
-        AttributeInstance attributeinstance = this.e.getAttributeInstance(GenericAttributes.FOLLOW_RANGE);
+        final AttributeInstance attributeinstance = this.e.getAttributeInstance(AttributesAccessor.targetRange); // EMC
 
         return attributeinstance == null ? 16.0D : attributeinstance.getValue();
     }
