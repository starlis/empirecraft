From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Mon, 5 Jul 2021 21:55:42 -0500
Subject: [PATCH] DispenserWaxBlockEvent


diff --git a/src/main/java/com/empireminecraft/customevents/DispenserWaxBlockEvent.java b/src/main/java/com/empireminecraft/customevents/DispenserWaxBlockEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..e2e079df695054dbca673b3952b97461f55400d5
--- /dev/null
+++ b/src/main/java/com/empireminecraft/customevents/DispenserWaxBlockEvent.java
@@ -0,0 +1,63 @@
+package com.empireminecraft.customevents;
+
+import org.bukkit.block.Block;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.BlockEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+public class DispenserWaxBlockEvent extends BlockEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+
+    private final Block dispenser;
+    private final ItemStack honeycomb;
+    private boolean cancelled;
+
+    public DispenserWaxBlockEvent(@NotNull Block waxedBlock, @NotNull Block dispenser, @NotNull ItemStack honeycomb) {
+        super(waxedBlock);
+        this.dispenser = dispenser;
+        this.honeycomb = honeycomb;
+    }
+
+    /**
+     * Gets the dispenser that is doing the waxing
+     *
+     * @return the beehive that was harvested.
+     */
+    @NotNull
+    public Block getDispenser() {
+        return dispenser;
+    }
+
+    /**
+     * Gets the item used to wax the block.
+     *
+     * @return the item used to wax.
+     */
+    @NotNull
+    public ItemStack getHoneycomb() {
+        return honeycomb.clone();
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
