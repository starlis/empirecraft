From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Tue, 17 Mar 2020 18:59:20 -0500
Subject: [PATCH] Properly handle entityTags on SpawnEggs


diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
index 663e57045f870a5c1b930499f2260ad96551aacd..3f387ee130e4fbdd2444b6cc8f61da79843ac813 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
@@ -5,13 +5,18 @@ import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.Sets;
 import java.util.Map;
 import java.util.Set;
+import com.mojang.serialization.Dynamic;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.datafix.fixes.References;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.entity.CraftEntitySnapshot;
 import org.bukkit.craftbukkit.util.CraftLegacy;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.EntitySnapshot;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.meta.SpawnEggMeta;
@@ -125,6 +130,16 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
 
         if (tag.contains(CraftMetaSpawnEgg.ENTITY_TAG.NBT)) {
             this.entityTag = tag.getCompound(CraftMetaSpawnEgg.ENTITY_TAG.NBT).copy();
+            // EMC start
+            if (!this.entityTag.isEmpty()) {
+                String entityType = entityTag.getString(CraftMetaSpawnEgg.ENTITY_ID.NBT);
+                this.spawnedType = EntityType.fromName(entityType);
+                entityTag.remove(CraftMetaSpawnEgg.ENTITY_ID.NBT);
+                if (entityTag != null && entityTag.isEmpty()) {
+                    entityTag = null;
+                }
+            }
+            // EMC end
         }
     }
 
@@ -160,7 +175,13 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
             }
 
             // Tag still has some other data, lets try our luck with a conversion
-            if (!this.entityTag.isEmpty()) {
+            if (this.spawnedType == null && this.entityTag.contains(CraftMetaSpawnEgg.ENTITY_ID.NBT) && !this.entityTag.isEmpty()) { // EMC - only try converting when there is an id and spawnedType is not found already
+                // EMC start - try updating and catch update exceptions
+                try {
+                    entityTag = (CompoundTag) MinecraftServer.getServer().fixerUpper.update(References.ENTITY, new Dynamic(NbtOps.INSTANCE, entityTag), -1, CraftMagicNumbers.INSTANCE.getDataVersion()).getValue();
+                } catch (IllegalArgumentException ignored) {
+                }
+                // EMC end
                 // SPIGOT-4128: This is hopeless until we start versioning stacks. RIP data.
                 // entityTag = (NBTTagCompound) MinecraftServer.getServer().dataConverterManager.update(DataConverterTypes.ENTITY, new Dynamic(DynamicOpsNBT.a, entityTag), -1, CraftMagicNumbers.DATA_VERSION).getValue();
             }
@@ -168,7 +189,15 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
             // See if we can read a converted ID tag
             if (this.entityTag.contains(CraftMetaSpawnEgg.ENTITY_ID.NBT)) {
                 this.spawnedType = EntityType.fromName(new ResourceLocation(this.entityTag.getString(CraftMetaSpawnEgg.ENTITY_ID.NBT)).getPath());
+                // EMC start
+                if (spawnedType != null) {
+                    entityTag.remove(CraftMetaSpawnEgg.ENTITY_ID.NBT);
+                }
+            }
+            if (entityTag.isEmpty()) {
+                entityTag = null;
             }
+            // EMC end
         }
     }
 
@@ -283,7 +312,7 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
             CraftMetaSpawnEgg that = (CraftMetaSpawnEgg) meta;
 
             return this.hasSpawnedType() ? that.hasSpawnedType() && this.spawnedType.equals(that.spawnedType) : !that.hasSpawnedType()
-                    && this.entityTag != null ? that.entityTag != null && this.entityTag.equals(that.entityTag) : this.entityTag == null;
+                    && (this.entityTag != null ? that.entityTag != null && this.entityTag.equals(that.entityTag) : that.entityTag == null); // EMC - fix logic
         }
         return true;
     }
@@ -338,6 +367,7 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
             if (this.entityTag != null) {
                 // Remove ID tag as it is now in the material
                 this.entityTag.remove(CraftMetaSpawnEgg.ENTITY_ID.NBT);
+                if (entityTag.isEmpty()) { entityTag = null; } // EMC
             }
 
             return CraftLegacy.fromLegacy(new MaterialData(Material.LEGACY_MONSTER_EGG, (byte) this.spawnedType.getTypeId()));
