From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 27 Feb 2013 23:27:45 -0500
Subject: [PATCH] Hidden Item Meta

This adds the ability to store hidden metadata in item lore.

Simply set a line to "&&::META" and every blank line before, that line, and every line after will be hidden from view on the client.

for example, you can set &&::META on line 20, and there will not be 19 blank lines before it.
Then you can store Data on 21+

Also adds a &&::SHINY tag to send a fake enchantment aura if it does not exists.
Must be set before META

diff --git a/src/main/java/com/empireminecraft/api/HiddenItemMeta.java b/src/main/java/com/empireminecraft/api/HiddenItemMeta.java
new file mode 100644
index 0000000000000000000000000000000000000000..047be7c6be1b699ee3607e068acce50b20b7147c
--- /dev/null
+++ b/src/main/java/com/empireminecraft/api/HiddenItemMeta.java
@@ -0,0 +1,104 @@
+package com.empireminecraft.api;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.network.chat.Component;
+
+public final class HiddenItemMeta {
+    private HiddenItemMeta() {
+    }
+
+    public static CompoundTag filterItemLore(CompoundTag nbttagcompound, boolean storeOriginal) {
+        if (nbttagcompound != null && nbttagcompound.contains("display")) {
+            CompoundTag display = nbttagcompound.getCompound("display");
+            if (display.contains("Lore")) {
+                ListTag lore = display.getList("Lore", 8);
+                int lastLine = 0;
+                boolean hasSpecial = false;
+                boolean hasShiny = false;
+                for (int i = 0; i < lore.size(); i++) {
+                    String line = lore.getString(i);
+                    if (line.startsWith("{") && line.endsWith("}")) {
+                        Component component = Component.Serializer.fromJson(line);
+                        line = component != null ? component.getString() : line;
+                    }
+                    if (line.startsWith("\"") && line.endsWith("\"") && line.length() > 1) {
+                        line = line.substring(1, line.length() - 1);
+                    }
+
+                    if ("&&::META".equals(line)) {
+                        hasSpecial = true;
+                        break;
+                    } else if (!line.isEmpty()) {
+                        if ("&&::SHINY".equals(line)) {
+                            hasShiny = true;
+                            hasSpecial = true;
+                            break;
+                        } else {
+                            lastLine = i+1;
+                        }
+                    }
+                }
+                if (hasSpecial) {
+                    ListTag newlore = new ListTag();
+                    for (int x = 0; x < lastLine; x++) {
+                        newlore.add(StringTag.valueOf(lore.getString(x)));
+                    }
+
+                    nbttagcompound = nbttagcompound.copy();
+                    if (hasShiny && !nbttagcompound.contains("Enchantments")) {
+                        ListTag nbtbase = new ListTag();
+                        CompoundTag enchant = new CompoundTag();
+                        enchant.putShort("id", (short) 1);
+                        enchant.putShort("lvl", (short) 1);
+                        nbtbase.add(enchant);
+                        nbttagcompound.put("Enchantments" , nbtbase);
+                        int flags = 1;
+                        if (nbttagcompound.contains("HideFlags")) {
+                            flags = nbttagcompound.getInt("HideFlags");
+                            nbttagcompound.putInt("HideFlagsOrig", flags);
+                            flags &= 1;
+                        } else {
+                            nbttagcompound.remove("HideFlagsOrig");
+                        }
+                        nbttagcompound.putInt("HideFlags", flags);
+                        nbttagcompound.putInt("fakeench", 1);
+                    }
+                    display = nbttagcompound.getCompound("display");
+                    display.put("Lore", newlore);
+                    if (storeOriginal) {
+                        display.put("OriginalLore", lore);
+                    }
+                }
+            }
+        }
+        return nbttagcompound;
+    }
+
+    public static CompoundTag restoreItemLore(CompoundTag tag) {
+        if (tag == null) {
+            return null;
+        }
+        if (tag.contains("display")) {
+            CompoundTag display = tag.getCompound("display");
+            if (display.contains("OriginalLore")) {
+                display.put("Lore", display.getList("OriginalLore", 8));
+                display.remove("OriginalLore");
+            }
+        }
+        // If shiny was used
+        if (tag.contains("fakeench")) {
+            int orig = tag.getInt("HideFlagsOrig");
+            if (tag.contains("HideFlagsOrig") && orig != 1) {
+                tag.putInt("HideFlags", orig);
+            } else {
+                tag.remove("HideFlags");
+            }
+            tag.remove("fakeench");
+            tag.remove("Enchantments");
+            tag.remove("HideFlagsOrig");
+        }
+        return tag;
+    }
+}
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index b863249ff7e13cf4939c8961601f0564c62fd661..aca432cbdf3997488edd16b6981991ffc4981173 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -652,6 +652,7 @@ public class FriendlyByteBuf extends ByteBuf {
                 // CraftItemStack.setItemMeta(stack, CraftItemStack.getItemMeta(stack)); // Paper - This is no longer with raw NBT being handled in metadata
                 // Spigot end
                 nbttagcompound = stack.getTag();
+                nbttagcompound = com.empireminecraft.api.HiddenItemMeta.filterItemLore(nbttagcompound, true); // EMC
             }
 
             this.writeNbt(nbttagcompound);
@@ -669,6 +670,7 @@ public class FriendlyByteBuf extends ByteBuf {
             ItemStack itemstack = new ItemStack(item, b0);
 
             itemstack.setTag(this.readNbt());
+            com.empireminecraft.api.HiddenItemMeta.restoreItemLore(itemstack.getTag()); // EMC - get around creative menu having ultimate control of the NBT...
             // CraftBukkit start
             if (false && itemstack.getTag() != null) { // Paper - This is no longer needed with raw NBT being handled in metadata
                 CraftItemStack.setItemMeta(itemstack, CraftItemStack.getItemMeta(itemstack));
diff --git a/src/main/java/net/minecraft/network/chat/HoverEvent.java b/src/main/java/net/minecraft/network/chat/HoverEvent.java
index 9067bab8ec695417d479393f07d9bc6432427d73..508d7b1e9dc9f8ae9888197a444e6e0bb3b23932 100644
--- a/src/main/java/net/minecraft/network/chat/HoverEvent.java
+++ b/src/main/java/net/minecraft/network/chat/HoverEvent.java
@@ -206,7 +206,7 @@ public class HoverEvent {
         @Nullable
         private ItemStack itemStack;
 
-        ItemStackInfo(Item item, int count, @Nullable CompoundTag nbt) {
+        public ItemStackInfo(Item item, int count, @Nullable CompoundTag nbt) { // EMC - make public
             this(item, count, Optional.ofNullable(nbt));
         }
 
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 1ad126d992d95062a3db08374db7a927f23a0cac..6c49c41d2ee05af140277dc79eb1cacf6f4070e8 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -37,6 +37,7 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.TagParser;
 import net.minecraft.network.chat.CommonComponents;
@@ -1324,8 +1325,26 @@ public final class ItemStack {
         MutableComponent ichatmutablecomponent1 = ComponentUtils.wrapInSquareBrackets(ichatmutablecomponent);
 
         if (!this.isEmpty()) {
+            // EMC start
+            CompoundTag nbttagcompound = this.save(new CompoundTag());
+            if (nbttagcompound.contains("tag")) {
+                CompoundTag tag = com.empireminecraft.api.HiddenItemMeta.filterItemLore(nbttagcompound.getCompound("tag"), false);
+                CompoundTag display = tag.getCompound("display");
+                if (display.contains("Lore")) {
+                    ListTag lore = display.getList("Lore", 8);
+                    ListTag newlore = new ListTag();
+                    for (int i = 0; i < lore.size(); i++) {
+                        String line = lore.getString(i);
+                        String newline = (line.isEmpty() ? " " : line);
+                        newlore.add(StringTag.valueOf(newline));
+                    }
+                    display.put("Lore", newlore);
+                }
+                nbttagcompound.put("tag", tag);
+            }
+            // EMC end
             ichatmutablecomponent1.withStyle(this.getRarity().color).withStyle((chatmodifier) -> {
-                return chatmodifier.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this)));
+                return chatmodifier.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this.getItem(), this.getCount(), nbttagcompound))); // EMC - use different constructor
             });
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 71aac5d4cf29cea9daa378fc8ac584750de4d1ca..c8c090af19abeefa62d64639780599f7fb7c0a59 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -497,7 +497,8 @@ public final class CraftItemFactory implements ItemFactory {
     // Paper start - Adventure
     @Override
     public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final ItemStack item, final java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {
-        final net.minecraft.nbt.CompoundTag tag = CraftItemStack.asNMSCopy(item).getTag();
+        net.minecraft.nbt.CompoundTag tag = CraftItemStack.asNMSCopy(item).getTag(); // EMC - remove final
+        tag = com.empireminecraft.api.HiddenItemMeta.filterItemLore(tag, false); // EMC
         return net.kyori.adventure.text.event.HoverEvent.showItem(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowItem.showItem(item.getType().getKey(), item.getAmount(), io.papermc.paper.adventure.PaperAdventure.asBinaryTagHolder(tag))));
     }
 
