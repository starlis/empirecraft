From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 13 Dec 2016 00:40:10 -0500
Subject: [PATCH] Villager Treasure Map Events / Changes


diff --git a/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java b/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java
index fa8cbd5a38a3969ce9c8e0fc2cd36566ea252a2c..dfe13c0182596608f9d00607da57a262e184ab59 100644
--- a/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java
+++ b/src/main/java/com/empireminecraft/api/CraftEAPI_Misc.java
@@ -23,5 +23,35 @@
 
 package com.empireminecraft.api;
 
+import net.minecraft.core.BlockPos;
+import net.minecraft.network.chat.Component;
+import io.papermc.paper.util.MCUtil;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.MapItem;
+import net.minecraft.world.level.saveddata.maps.MapDecoration;
+import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
+import org.bukkit.Location;
+import org.bukkit.StructureType;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.jetbrains.annotations.NotNull;
+
 public class CraftEAPI_Misc implements EAPI_Misc {
+
+    @Override
+    @NotNull
+    public org.bukkit.inventory.ItemStack createTreasureMap(@NotNull StructureType type, @NotNull Location loc) {
+        MapDecoration.Type[] values = MapDecoration.Type.values();
+        if (type.getMapIcon() == null) {
+            throw new IllegalArgumentException("Invalid Icon Type");
+        }
+        ServerLevel level = MCUtil.getNMSWorld(loc.getWorld());
+        BlockPos pos = MCUtil.toBlockPosition(loc);
+        ItemStack itemstack = MapItem.create(level, pos.getX(), pos.getZ(), (byte) 2, true, true);
+        MapItem.renderBiomePreviewMap(level, itemstack);
+
+        MapItemSavedData.addTargetDecoration(itemstack, pos, "+", values[type.getMapIcon().ordinal()]);
+        itemstack.setHoverName(Component.translatable("filled_map." + type.getName().toLowerCase()));
+        return CraftItemStack.asCraftMirror(itemstack);
+    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 9b9afc01c287528b911e13cabd95f41c0d822a48..7da338daabebde81295e27be030edf9fd9d97413 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -50,6 +50,7 @@ import net.minecraft.world.level.levelgen.structure.Structure;
 import net.minecraft.world.level.saveddata.maps.MapDecoration;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import org.apache.commons.lang3.tuple.Pair;
+import org.bukkit.StructureType;
 
 public class VillagerTrades {
     private static final int DEFAULT_SUPPLY = 12;
@@ -1626,11 +1627,11 @@ public class VillagerTrades {
         private final int villagerXp;
 
         public TreasureMapForEmeralds(int price, TagKey<Structure> structure, String nameKey, MapDecoration.Type iconType, int maxUses, int experience) {
-            this.emeraldCost = price;
+            this.emeraldCost = Math.min(64, 35 + price); // EMC - boost due to modified behavior - each map is unique, when its not in vanilla
             this.destination = structure;
             this.displayName = nameKey;
             this.destinationType = iconType;
-            this.maxUses = maxUses;
+            this.maxUses = 2; // EMC - max 2 purchase before lock
             this.villagerXp = experience;
         }
 
@@ -1642,12 +1643,18 @@ public class VillagerTrades {
             } else {
                 ServerLevel serverLevel = (ServerLevel)entity.level();
                 if (!serverLevel.paperConfig().environment.treasureMaps.enabled) return null; // Paper - Configurable cartographer treasure maps
-                BlockPos blockPos = serverLevel.findNearestMapStructure(this.destination, entity.blockPosition(), 100, !serverLevel.paperConfig().environment.treasureMaps.findAlreadyDiscoveredVillager); // Paper - Configurable cartographer treasure maps
-                if (blockPos != null) {
-                    ItemStack itemStack = MapItem.create(serverLevel, blockPos.getX(), blockPos.getZ(), (byte)2, true, true);
-                    MapItem.renderBiomePreviewMap(serverLevel, itemStack);
-                    MapItemSavedData.addTargetDecoration(itemStack, blockPos, "+", this.destinationType);
-                    itemStack.setHoverName(Component.translatable(this.displayName));
+                // EMC start - refactor treasure maps to be pending - ABSOLUTELY DEPENDS ON PLUGIN CODE!!!!!!!!!!!
+                var event = new com.empireminecraft.customevents.CreatePendingTreasureMapEvent(StructureType.getStructureTypes().get(destinationType.name().toLowerCase()));
+                //BlockPos blockPos = serverLevel.findNearestMapStructure(this.destination, entity.blockPosition(), 100, !serverLevel.paperConfig().environment.treasureMaps.findAlreadyDiscoveredVillager); // Paper - Configurable cartographer treasure maps
+                //if (blockPos != null) {
+                    //ItemStack itemStack = MapItem.create(serverLevel, blockPos.getX(), blockPos.getZ(), (byte)2, true, true);
+                    //MapItem.renderBiomePreviewMap(serverLevel, itemStack);
+                    //MapItemSavedData.addTargetDecoration(itemStack, blockPos, "+", this.destinationType);
+                    //itemStack.setHoverName(Component.translatable(this.displayName));
+                event.callEvent();
+                if (event.getItem() != null) {
+                    ItemStack itemStack = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
+                    // EMC end
                     return new MerchantOffer(
                         new ItemStack(Items.EMERALD, this.emeraldCost), new ItemStack(Items.COMPASS), itemStack, this.maxUses, this.villagerXp, 0.2F
                     );
