From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 16 Jan 2019 21:29:20 -0500
Subject: [PATCH] Add API to skip checking names for exact stack matches


diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index f1aa67997f904953742e8895e49341c2f73d44a2..d2a3352875e6ae4ad26acea52628c342aab4efda 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -7,6 +7,8 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 import java.util.function.Predicate;
+import java.util.stream.Collectors;
+
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Tag;
@@ -193,22 +195,31 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         private List<ItemStack> choices;
 
         public ExactChoice(@NotNull ItemStack stack) {
-            this(Arrays.asList(stack));
+            this(stack, false);
+        }
+
+        public ExactChoice(@NotNull ItemStack stack, boolean skipCheckingName) {
+            this(Arrays.asList(stack), skipCheckingName);
         }
 
         public ExactChoice(@NotNull ItemStack... stacks) {
             this(Arrays.asList(stacks));
         }
 
+        private final boolean skipCheckingName;
         public ExactChoice(@NotNull List<ItemStack> choices) {
+            this(choices, false);
+        }
+        public ExactChoice(@NotNull List<ItemStack> choices, boolean skipCheckingName) {
             Preconditions.checkArgument(choices != null, "choices");
             Preconditions.checkArgument(!choices.isEmpty(), "Must have at least one choice");
+            this.skipCheckingName = skipCheckingName;
             for (ItemStack choice : choices) {
                 Preconditions.checkArgument(choice != null, "Cannot have null choice");
                 Preconditions.checkArgument(!choice.getType().isAir(), "Cannot have empty/air choice");
             }
 
-            this.choices = new ArrayList<>(choices);
+            this.choices = choices.stream().map(ItemStack::ensureServerConversions).collect(Collectors.toList());
         }
 
         @NotNull
@@ -242,13 +253,26 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         @Override
         public boolean test(@NotNull ItemStack t) {
             for (ItemStack match : choices) {
-                if (t.isSimilar(match)) {
+                if (isSimilar(t, match, skipCheckingName)) {
                     return true;
                 }
             }
 
             return false;
         }
+        // EMC start
+        private static boolean isSimilar(ItemStack item, ItemStack other, boolean skipCheckingName) {
+            if (skipCheckingName) {
+                ItemStack clone = other.clone();
+                org.bukkit.inventory.meta.ItemMeta itemMeta = clone.getItemMeta();
+                itemMeta.displayName(item.getItemMeta().displayName());
+                clone.setItemMeta(itemMeta);
+                return item.isSimilar(clone);
+            } else {
+                return item.isSimilar(other);
+            }
+        }
+        // EMC end
 
         @Override
         public int hashCode() {
diff --git a/src/main/java/org/bukkit/inventory/ShapedRecipe.java b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
index c0105d716985acef497d60b5c631a56b4ca5847b..76bbfeb04bc2d78af9971ae19df9df0fb8afde84 100644
--- a/src/main/java/org/bukkit/inventory/ShapedRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
@@ -189,6 +189,10 @@ public class ShapedRecipe extends CraftingRecipe {
         return setIngredient(key, new RecipeChoice.ExactChoice(item.clone())); // Paper
     }
     // Paper end
+    @NotNull
+    public ShapedRecipe setIngredient(char key, @NotNull ItemStack item, boolean skipCheckingName) {
+        return setIngredient(key, new RecipeChoice.ExactChoice(item, skipCheckingName));
+    }
 
     /**
      * Get a copy of the ingredients map.
diff --git a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
index 79db6dbc0367de2eaa397674624c765d5aeb8fa5..6f75975170b1919b7f381ab3943013835aa38cb7 100644
--- a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
@@ -139,16 +139,26 @@ public class ShapelessRecipe extends CraftingRecipe {
     // Paper start
     @NotNull
     public ShapelessRecipe addIngredient(@NotNull ItemStack item) {
-        return addIngredient(item.getAmount(), item);
+        return addIngredient(item.getAmount(), item, false);
+    }
+
+    @NotNull
+    public ShapelessRecipe addIngredient(@NotNull ItemStack item, boolean skipCheckingName) {
+        return addIngredient(item.getAmount(), item, skipCheckingName);
     }
 
     @NotNull
     public ShapelessRecipe addIngredient(int count, @NotNull ItemStack item) {
+        return addIngredient(count, item, false);
+    }
+
+    @NotNull
+    public ShapelessRecipe addIngredient(int count, @NotNull ItemStack item, boolean skipCheckingName) {
         Preconditions.checkArgument(ingredients.size() + count <= 9, "Shapeless recipes cannot have more than 9 ingredients");
         Preconditions.checkArgument(!item.getType().isAir(), "Item cannot be air"); // Paper
         item = item.clone(); // Paper
         while (count-- > 0) {
-            ingredients.add(new RecipeChoice.ExactChoice(item));
+            ingredients.add(new RecipeChoice.ExactChoice(item, skipCheckingName));
         }
         return this;
     }
