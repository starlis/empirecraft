From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Wed, 2 Jun 2021 09:15:57 -0500
Subject: [PATCH] Add api to FurnaceExtractEvent for furnaces breaking

Specifically nullable player and extracted item
Added result item type and amount

diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
index 5ffd28fd24b4477a07fc9f6a3f669a6f4da9fa26..5c813f510ae261bb381757751cc22650b5ed6ea6 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
@@ -7,6 +7,7 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.block.BlockExpEvent;
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * This event is called when a player takes items out of a furnace-like block such as a
@@ -17,9 +18,14 @@ public class FurnaceExtractEvent extends BlockExpEvent {
     private final Player player;
     private final Material itemType;
     private final int itemAmount;
-
-    public FurnaceExtractEvent(@NotNull Player player, @NotNull Block block, @NotNull Material itemType, int itemAmount, int exp) {
+    // EMC start
+    private final Material resultType;
+    private final int resultAmount;
+    public FurnaceExtractEvent(@Nullable Player player, @NotNull Block block, @NotNull Material itemType, int itemAmount, int exp, @NotNull Material resultType, int resultAmount) { // EMC - add nullable and resultType
         super(block, exp);
+        this.resultType = resultType;
+        this.resultAmount = resultAmount;
+        // EMC end
         this.player = player;
         if (itemType != null && itemType.isLegacy()) {
             itemType = Bukkit.getUnsafe().fromLegacy(new MaterialData(itemType), true);
@@ -33,7 +39,7 @@ public class FurnaceExtractEvent extends BlockExpEvent {
      *
      * @return the relevant player
      */
-    @NotNull
+    @Nullable // EMC
     public Player getPlayer() {
         return player;
     }
@@ -43,7 +49,7 @@ public class FurnaceExtractEvent extends BlockExpEvent {
      *
      * @return the material of the item
      */
-    @NotNull
+    @Nullable // EMC
     public Material getItemType() {
         return itemType;
     }
@@ -56,4 +62,27 @@ public class FurnaceExtractEvent extends BlockExpEvent {
     public int getItemAmount() {
         return itemAmount;
     }
+    // EMC start
+    /**
+     * Get the Material of the recipe result being retrieved
+     * This is different from {@link #getItemType} for stored result experience
+     *
+     * @return the material of the recipe resul
+     */
+    @Nullable
+    public Material getResultType() {
+        return resultType;
+    }
+
+    /**
+     * Get the recipe result count being retrieved
+     * This is different from {@link #getItemAmount()} for stored result experience
+     *
+     * @return the amount of the recipe result
+     */
+    public int getResultAmount() {
+        return resultAmount;
+    }
+    // EMC end
+
 }
