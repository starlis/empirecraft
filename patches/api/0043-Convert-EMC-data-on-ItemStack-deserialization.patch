From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Sat, 25 Jan 2020 00:07:00 -0600
Subject: [PATCH] Convert EMC data on ItemStack deserialization

We stored the Variant of horses in the lore. This allows us to convert those
horse eggs so that they have the appropriate icon color without
spawning and re-eggifying it.

Also convert lore metadata from the old hiddentitemmeta patch

diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index b59222b8c262545d100a9fd28b3bf1d2a4cf4eb0..fba3db234dbed4541e9e95e97eb925e2aae37d21 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -571,8 +571,133 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
             }
         }
 
-        return result.ensureServerConversions(); // Paper
+        // EMC start
+        result = result.ensureServerConversions(); // Paper
+        if (version <= 1343) {
+            result = convertHorse(result);
+        }
+        if (version < 3955) { // 1.21.1
+            convertLoreMeta(result);
+        }
+        return result;
+        // EMC end
+    }
+
+    // EMC start
+    private static ItemStack convertHorse(@NotNull ItemStack itemStack) {
+        if (itemStack.getType() == Material.HORSE_SPAWN_EGG || itemStack.getType() == Material.PIG_SPAWN_EGG) {
+            ItemMeta meta = itemStack.getItemMeta();
+            java.util.List<String> lore = meta.getLore();
+            if (lore != null && lore.size() > 31) {
+                Material type = null;
+                for (int i = 31; i + 1 < lore.size(); i += 2) {
+                    if ("var".equalsIgnoreCase(lore.get(i)) || "type".equalsIgnoreCase(lore.get(i))) {
+                        String variant = lore.get(i + 1);
+                        if (variant != null) {
+                            switch(variant) {
+                                case "DONKEY":
+                                    type = Material.DONKEY_SPAWN_EGG;
+                                    break;
+                                case "MULE":
+                                    type = Material.MULE_SPAWN_EGG;
+                                    break;
+                                case "UNDEAD_HORSE":
+                                    type = Material.ZOMBIE_HORSE_SPAWN_EGG;
+                                    break;
+                                case "SKELETON_HORSE":
+                                    type = Material.SKELETON_HORSE_SPAWN_EGG;
+                                    break;
+                            }
+                        }
+                    }
+                }
+                if (type != null) {
+                    itemStack = itemStack.withType(type);
+                    itemStack.setItemMeta(meta);
+                }
+            }
+        }
+        return itemStack;
+    }
+    private static final net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer PLAIN_TEXT = net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer.plainText();
+    private static void convertLoreMeta(@NotNull ItemStack result) {
+        if (!result.hasItemMeta()) {
+            return;
+        }
+        ItemMeta meta = result.getItemMeta();
+        if (meta == null || !meta.hasLore()) {
+            return;
+        }
+        java.util.List<net.kyori.adventure.text.Component> lore = meta.lore();
+        if (lore == null) {
+            return;
+        }
+        int lastLine = 0;
+        boolean hasSpecial = false;
+        boolean hasShiny = false;
+        for (int i = 0; i < lore.size(); i++) {
+            String line = PLAIN_TEXT.serialize(lore.get(i));
+            if (!line.isEmpty()) {
+                if ("&&::SHINY".equals(line)) {
+                    hasShiny = true;
+                    hasSpecial = true;
+                    break;
+                } else if ("&&::META".equals(line)) {
+                    hasSpecial = true;
+                    break;
+                } else {
+                    lastLine = i + 1;
+                }
+            }
+        }
+        Map<String, String> metaMap = new java.util.HashMap<>();
+        if (hasSpecial) {
+            for (int i = 31; i + 1 < lore.size(); i += 2) {
+                String key = PLAIN_TEXT.serialize(lore.get(i));
+                String val = PLAIN_TEXT.serialize(lore.get(i + 1));
+                metaMap.put(key, val);
+            }
+
+            java.util.List<net.kyori.adventure.text.Component> newLore = com.google.common.collect.Lists.newArrayList();
+            for (int x = 0; x < lastLine; x++) {
+                newLore.add(lore.get(x));
+            }
+            meta.lore(newLore);
+
+            if (hasShiny && result.getEnchantments().isEmpty()) {
+                meta.setEnchantmentGlintOverride(true);
+            }
+
+            org.bukkit.persistence.PersistentDataContainer pdc = meta.getPersistentDataContainer();
+            metaMap.forEach((key, value) -> pdc.set(new NamespacedKey("empire", normalizeKey(key)), org.bukkit.persistence.PersistentDataType.STRING, value));
+
+            result.setItemMeta(meta);
+        }
+    }
+    static @NotNull String normalizeKey(@NotNull String input) {
+        StringBuilder sb = new StringBuilder(input.length() + 4);
+        boolean lastUnderscore = false;
+        char[] charArray = input.toCharArray();
+        for (int i = 0; i < charArray.length; i++) {
+            char c = charArray[i];
+            if (Character.isUpperCase(c)) {
+                if (i != 0 && !lastUnderscore) {
+                    sb.append('_');
+                }
+                sb.append(Character.toLowerCase(c));
+                lastUnderscore = false;
+            } else if ('-' == c || '.' == c || '/' == c || Character.isLowerCase(c) || Character.isDigit(c)) {
+                sb.append(c);
+                lastUnderscore = false;
+            } else {
+                sb.append('_');
+                lastUnderscore = true;
+            }
+        }
+
+        return sb.toString();
     }
+    // EMC end
 
     // Paper start
     /**
