From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 17 May 2016 19:38:55 -0400
Subject: [PATCH] Contextual Identifer API

Seems silly, but I want to have a common interface to represent an identity
but not have risk of 2 objects equaling each other.

Example: ChunkIdentifier and a ResidenceIdentifier are 2 ways to identify a context
but can't ever equal each other.

But we may want to store counting data by chunk, but also by Residence, and cache to the same cache map.

Objects represented by an Identifier, should be able to use them as their equal/hashcodes.

diff --git a/src/main/java/com/empireminecraft/Identifier.java b/src/main/java/com/empireminecraft/Identifier.java
new file mode 100644
index 0000000000000000000000000000000000000000..188c344916ece3bd0abe38b0814599bb6ecebb88
--- /dev/null
+++ b/src/main/java/com/empireminecraft/Identifier.java
@@ -0,0 +1,13 @@
+/*
+ * Copyright (c) 2016. Starlis LLC / dba Empire Minecraft
+ *
+ * This source code is proprietary software and must not be redistributed without Starlis LLC's approval
+ *
+ */
+
+package com.empireminecraft;
+
+/**
+ * Simply represents an object identifier
+ */
+public interface Identifier {}
diff --git a/src/main/java/com/empireminecraft/UniqueIdentifier.java b/src/main/java/com/empireminecraft/UniqueIdentifier.java
new file mode 100644
index 0000000000000000000000000000000000000000..8ea7e0ca64faeb059ef877e54a55c0e5a60e59e3
--- /dev/null
+++ b/src/main/java/com/empireminecraft/UniqueIdentifier.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2016. Starlis LLC / dba Empire Minecraft
+ *
+ * This source code is proprietary software and must not be redistributed without Starlis LLC's approval
+ *
+ */
+
+package com.empireminecraft;
+
+import org.jetbrains.annotations.NotNull;
+
+import java.util.UUID;
+
+public class UniqueIdentifier implements Identifier {
+    private final UUID uuid;
+    public UniqueIdentifier(@NotNull UUID uuid) {
+        this.uuid = uuid;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) { return true; }
+        if (o == null || getClass() != o.getClass()) { return false; }
+
+        UniqueIdentifier that = (UniqueIdentifier) o;
+
+        return uuid.equals(that.uuid);
+
+    }
+
+    @Override
+    public int hashCode() {
+        return uuid.hashCode();
+    }
+}
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index 14649707d71236f01eb99ace6ee469cef29e6906..ff8d6385f8984f73732424a1f8b152d538af259e 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -2,6 +2,7 @@ package org.bukkit;
 
 import java.util.Collection;
 
+import com.empireminecraft.Identifier;
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
@@ -167,6 +168,7 @@ public interface Chunk extends PersistentDataHolder, com.empireminecraft.api.met
     @NotNull
     Collection<BlockState> getTileEntities(java.util.function.@NotNull Predicate<? super Block> blockPredicate, boolean useSnapshot);
     // Paper end
+    @NotNull Identifier getIdentifier(); // EMC
 
     /**
      * Checks if the chunk is fully generated.
