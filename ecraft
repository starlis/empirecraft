#!/usr/bin/env bash

# save name of current file
self_name="${0##*/}"

# get base dir regardless of execution location
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SOURCE=$([[ "$SOURCE" = /* ]] && echo "$SOURCE" || echo "$PWD/${SOURCE#./}")
basedir=$(dirname "$SOURCE")
. $basedir/scripts/init.sh

paperstash() {
	STASHED=$(git stash)
}

paperunstash() {
	if [[ "$STASHED" != "No local changes to save" ]] ; then
		git stash pop
	fi
}
failed=0
case "$1" in
	"rb" | "rbp" | "rebuild")
	(
		set -e
		cd "$basedir"
		scripts/rebuildpatches.sh "$basedir" "$@" || exit 1
	) || failed=1
	;;
	"rbf" | "rbfull" | "rebuildfull")
	(
		set -e
		cd "$basedir"
		scripts/rebuildpatches.sh "$basedir" "nofilter" "$@" || exit 1
	) || failed=1
	;;
	"p" | "patch" | "apply")
	(
		set -e
		cd "$basedir"
		scripts/apply.sh "$basedir" || exit 1
	) || failed=1
	;;
	"b" | "bu" | "build")
	(
		basedir
		mvn -N install
		cd ${FORK_NAME}-API
		mvn clean install && cd ../${FORK_NAME}-Server && mvn clean install
	) || failed=1
	;;
	"d" | "de" | "deploy")
	(
		basedir
		mvn -N install
		cd ${FORK_NAME}-API
		mvn clean deploy && cd ../${FORK_NAME}-Server && mvn clean install
	) || failed=1
	;;
	"up" | "upstream")
	(
		cd "$basedir"
		scripts/upstream.sh "$2" || exit 1
		if [ "$2" == "up" ]; then
			(scripts/apply.sh "$basedir" && scripts/rebuildpatches.sh "$basedir" nofilter && scripts/commitup.sh) || exit 1
		fi
	) || failed=1
	;;
	"cup" | "commitup" | "upc" | "upcommit")
	(
		cd "$basedir"
		scripts/commitup.sh || exit 1
	) || failed=1
	;;
	"con" | "continue")
	(
		if [ -d ".git/rebase-apply" ]; then
			git -c commit.gpgsign=false am --continue
		elif [ -d ".git/rebase-merge" ]; then
			git -c commit.gpgsign=false rebase --continue
		fi
	) || failed=1
	;;
	"r" | "root")
		cd "$basedir"
	;;
	"a" | "api")
		cd "$basedir/${FORK_NAME}-API"
	;;
	"s" | "server")
		cd "$basedir/${FORK_NAME}-Server"
	;;
	"setup")
		if [[ -f ~/.bashrc ]] ; then
			NAME="ec"
			if [[ ! -z "${2+x}" ]] ; then
				NAME="$2"
			fi
			(grep "alias $NAME=" ~/.bashrc > /dev/null) && (sed -i "s|alias $NAME=.*|alias $NAME='. $SOURCE'|g" ~/.bashrc) || (echo "alias $NAME='. $SOURCE'" >> ~/.bashrc)
			alias "$NAME=. $SOURCE"
			echo "You can now just type '$NAME' at any time to access the $self_name tool."
		fi
	;;
	*)
		echo "${FORK_NAME} build tool command. This provides a variety of commands to build and manage the ${FORK_NAME} build"
		echo "environment. For all of the functionality of this command to be available, you must first run the"
		echo "'setup' command. View below for details. For essential building and patching, you do not need to do the setup."
		echo ""
		echo " Normal commands:"
		echo "  * rb, rebuild  | Rebuild patches, can be called from anywhere."
		echo "  * p, patch     | Apply all patches to top of Paper without building it. Can be run from anywhere."
		echo "  * up, upstream | Build Paper upstream, pass arg up to update paper. Can be run from anywhere."
		echo "  * b, build     | Build API and Server but no deploy. Can be ran anywhere."
		echo "  * d, deploy    | Build and Deploy API jar and build Server. Can be ran anywhere."
		echo ""
		echo " These commands require the setup command before use:"
		echo "  * r, root      | Change directory to the root of the project."
		echo "  * a. api       | Move to the ${FORK_NAME}-API directory."
		echo "  * s, server    | Move to the ${FORK_NAME}-Server directory."
		echo "  * e, edit      | Use to edit a specific patch, give it the argument \"server\" or \"api\""
		echo "                 | respectively to edit the correct project. Use the argument \"continue\" after"
		echo "                 | the changes have been made to finish and rebuild patches. Can be called from anywhere."
		echo ""
		echo "  * setup        | Add an alias to .bashrc to allow full functionality of this script. Run as:"
		echo "                 |     . ./$self_name setup"
		echo "                 | After you run this command you'll be able to just run '$self_name' from anywhere."
		echo "                 | The default name for the resulting alias is '$self_name', you can give an argument to override"
		echo "                 | this default, such as:"
		echo "                 |     . ./$self_name setup example"
		echo "                 | Which will allow you to run 'example' instead."
	;;
esac

unset -f paperstash
unset -f paperunstash
if [ "$failed" == "1" ]; then
	unset failed
	false
else
	unset failed
	true
fi
