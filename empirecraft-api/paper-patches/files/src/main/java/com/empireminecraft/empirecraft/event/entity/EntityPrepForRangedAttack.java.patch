--- /dev/null
+++ b/src/main/java/com/empireminecraft/empirecraft/event/entity/EntityPrepForRangedAttack.java
@@ -1,0 +_,98 @@
+/*
+ * Copyright (c) 2018 Daniel Ennis (Aikar) MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.empireminecraft.empirecraft.event.entity;
+
+import com.destroystokyo.paper.entity.RangedEntity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jspecify.annotations.NullMarked;
+
+@NullMarked
+public class EntityPrepForRangedAttack extends EntityEvent implements Cancellable {
+    private final LivingEntity target;
+    private boolean shouldStop;
+    private boolean shouldMoveNear;
+    private final int timeLOS;
+
+    public EntityPrepForRangedAttack(RangedEntity entity, LivingEntity target, boolean shouldStop, boolean shouldMoveNear, int timeLOS) {
+        super(entity);
+        this.target = target;
+        this.shouldStop = shouldStop;
+        this.shouldMoveNear = shouldMoveNear;
+        this.timeLOS = timeLOS;
+    }
+
+    @Override
+    public RangedEntity getEntity() {
+        return (RangedEntity) super.getEntity();
+    }
+
+    public LivingEntity getTarget() {
+        return target;
+    }
+
+    public boolean shouldStop() {
+        return shouldStop;
+    }
+
+    public boolean shouldMoveNear() {
+        return shouldMoveNear;
+    }
+
+    public void setShouldStop(boolean shouldStop) {
+        this.shouldStop = shouldStop;
+    }
+
+    public void setShouldMoveNear(boolean shouldMoveNear) {
+        this.shouldMoveNear = shouldMoveNear;
+    }
+
+    public int getTimeLOS() {
+        return timeLOS;
+    }
+
+    private static final HandlerList handlers = new HandlerList();
+
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    private boolean cancelled = false;
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        cancelled = cancel;
+    }
+}
