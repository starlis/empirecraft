--- /dev/null
+++ b/src/main/java/com/empireminecraft/empirecraft/api/EAPI_Entity.java
@@ -1,0 +_,121 @@
+/*
+ * Copyright (c) 2016 Starlis LLC / Daniel Ennis (Aikar) - MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.empireminecraft.empirecraft.api;
+
+import org.bukkit.World;
+import org.bukkit.entity.Mob;
+import com.empireminecraft.empirecraft.api.EntityTask.TaskHandler;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Item;
+import org.jspecify.annotations.NonNull;
+import org.jspecify.annotations.Nullable;
+import org.jspecify.annotations.NullMarked;
+
+import java.util.Set;
+
+@NullMarked
+public interface EAPI_Entity {
+
+    void cancelTasks(Entity entity);
+
+    default <T extends Entity> EntityTask<T> scheduleTask(T entity, int interval, Runnable task) {
+        return scheduleTask(entity, interval, new EntityTask<T>() {
+            @Override
+            public void run(@NonNull T entity) {
+                task.run();
+            }
+        });
+    }
+
+    default <T extends Entity> EntityTask<T> scheduleDelayedTask(T entity, int delay, Runnable task) {
+        return scheduleTask(entity, delay, new EntityTask<T>(1) {
+            @Override
+            public void run(@NonNull T entity) {
+                task.run();
+            }
+        });
+    }
+
+    default <T extends Entity> EntityTask<T> scheduleDelayedTask(T entity, int delay, TaskHandler<T> task) {
+        return scheduleTask(entity, delay, new EntityTask<T>(1) {
+            @Override
+            public void run(@NonNull T entity) {
+                task.run(entity, this);
+            }
+        });
+    }
+
+    default <T extends Entity> EntityTask<T> scheduleTask(T entity, int interval, TaskHandler<T> task) {
+        return scheduleTask(entity, interval, new EntityTask<T>() {
+            @Override
+            public void run(@NonNull T entity) {
+                task.run(entity, this);
+            }
+        });
+    }
+
+    default <T extends Entity> EntityTask<T> scheduleTask(T entity, int interval, int limit, TaskHandler<T> task) {
+        return scheduleTask(entity, interval, new EntityTask<T>(limit) {
+            @Override
+            public void run(@NonNull T entity) {
+                task.run(entity, this);
+            }
+        });
+    }
+
+    default <T extends Entity> EntityTask<T> scheduleTask(T entity, int interval, int limit, Runnable task) {
+        return scheduleTask(entity, interval, new EntityTask<T>(limit) {
+            @Override
+            public void run(@NonNull T entity) {
+                task.run();
+            }
+        });
+    }
+
+    <T extends Entity> EntityTask<T> scheduleTask(T entity, int interval, EntityTask<T> task);
+
+    void setItemCanDespawn(Item item, boolean canDespawn);
+
+    void setFireProof(Mob mob, boolean flag);
+
+    void setPanicProof(Mob mob, boolean flag);
+
+    void makeAggressive(Creature creature, float range);
+
+    boolean isAggressive(Creature creature);
+
+    void makePeaceful(Mob mob);
+
+    void addGoalByName(Mob mob, String goalName, boolean isTargetGoal, int tickRate, Class<?>[] argClasses, Object... args);
+
+    void removeGoalByName(Mob mob, String goalName);
+
+    Set<String> listGoalNames(Mob mob);
+
+    void setEntitySize(Entity mob, float width, float height);
+
+    void setTargetRange(Mob mob, @Nullable Double range);
+
+}
