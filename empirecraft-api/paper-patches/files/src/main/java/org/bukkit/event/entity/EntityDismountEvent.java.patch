--- a/src/main/java/org/bukkit/event/entity/EntityDismountEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDismountEvent.java
@@ -20,15 +_,26 @@
 
     @ApiStatus.Internal
     public EntityDismountEvent(@NotNull Entity entity, @NotNull Entity dismounted) {
-        this(entity, dismounted, true);
+        this(entity, dismounted, true, EntityDismountEvent.DismountReason.UNKNOWN); // EMC - Add DismountReason API
     }
 
     @ApiStatus.Internal
-    public EntityDismountEvent(@NotNull Entity entity, @NotNull Entity dismounted, boolean isCancellable) {
+    public EntityDismountEvent(@NotNull Entity entity, @NotNull Entity dismounted, boolean isCancellable, @NotNull DismountReason reason) { // EMC - Add DismountReason API
         super(entity);
         this.dismounted = dismounted;
         this.isCancellable = isCancellable;
-    }
+        this.reason = reason; // EMC - Add DismountReason API
+    }
+    // EMC start - Add DismountReason API
+    public enum DismountReason {
+        PLAYER, WATER, DEAD, DEAD_VEHICLE, TELEPORT, SPECTATE, LEASH, TRANSFER, UNKNOWN, DISCONNECT
+    }
+    public EntityDismountEvent.DismountReason reason;
+    @NotNull
+    public EntityDismountEvent.DismountReason getReason() {
+        return reason;
+    }
+    // EMC end - Add DismountReason API
 
     /**
      * Gets the entity which will no longer be ridden.
