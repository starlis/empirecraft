--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -288,6 +_,7 @@
     protected Object2DoubleMap<TagKey<Fluid>> fluidHeight = new Object2DoubleArrayMap<>(2);
     protected boolean wasEyeInWater;
     private final Set<TagKey<Fluid>> fluidOnEyes = new HashSet<>();
+    public boolean fireProof = false; // EMC - Add FireProof API
     public int invulnerableTime;
     protected boolean firstTick = true;
     protected final SynchedEntityData entityData;
@@ -321,7 +_,7 @@
     private final Set<String> tags = new io.papermc.paper.util.SizeLimitedSet<>(new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>(), MAX_ENTITY_TAG_COUNT); // Paper - fully limit tag size - replace set impl
     private final double[] pistonDeltas = new double[]{0.0, 0.0, 0.0};
     private long pistonDeltasGameTime;
-    private EntityDimensions dimensions;
+    private EntityDimensions dimensions; public void setDimensions(float width, float height) { dimensions = EntityDimensions.fixed(width, height); } // EMC - Adjust Entity Size
     private float eyeHeight;
     public boolean isInPowderSnow;
     public boolean wasInPowderSnow;
@@ -1889,7 +_,7 @@
     }
 
     public boolean fireImmune() {
-        return this.getType().fireImmune();
+        return this.getType().fireImmune() || this.fireProof; // EMC - Add FireProof API
     }
 
     public boolean causeFallDamage(double fallDistance, float damageMultiplier, DamageSource damageSource) {
@@ -2686,6 +_,11 @@
             fromNetherPortal = input.getBooleanOr("Paper.FromNetherPortal", false);
             input.getString("Paper.SpawnReason").ifPresent(spawnReasonName -> {
                 try {
+                    // EMC start - convert FORCE SpawnReason
+                    if ("FORCE".equals(spawnReasonName)) {
+                        spawnReasonName = "CUSTOM";
+                    }
+                    // EMC end - convert FORCE SpawnReason
                     spawnReason = org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.valueOf(spawnReasonName);
                 } catch (Exception ignored) {
                     LOGGER.error("Unknown SpawnReason " + spawnReasonName + " for " + this);
