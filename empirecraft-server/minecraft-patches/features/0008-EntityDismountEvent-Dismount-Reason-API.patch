From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 7 Aug 2013 19:52:14 -0400
Subject: [PATCH] EntityDismountEvent Dismount Reason API


diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index bab17d21b74f5e4eea478002c5d20a6b7d15fe41..80d3d8cc89d03a2835d0e34a6d6c89beaf8c0744 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -803,6 +803,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
                                         if (!vehicle.isRemoved() && vehicle.hasPassenger(entity)) {
                                             return;
                                         }
+                                        if (vehicle.isRemoved()) { entity.dismountReason =  org.bukkit.event.entity.EntityDismountEvent.DismountReason.DEAD_VEHICLE; } // EMC - DismountReason API
 
                                         entity.stopRiding();
                                     }
@@ -1294,6 +1295,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
 
     private void tickPassenger(Entity ridingEntity, Entity passengerEntity, final boolean isActive) { // Paper - EAR 2
         if (passengerEntity.isRemoved() || passengerEntity.getVehicle() != ridingEntity) {
+            if (passengerEntity.isRemoved()) { passengerEntity.dismountReason =  org.bukkit.event.entity.EntityDismountEvent.DismountReason.DEAD_VEHICLE; } // EMC - DismountReason API
             passengerEntity.stopRiding();
         } else if (passengerEntity instanceof Player || this.entityTickList.contains(passengerEntity)) {
             passengerEntity.setOldPosAndRot();
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 52078d8a67c45748759ac4ea5d1a8c49b24d1eb7..bfec5dfd6c3c2e51457cd7300217d7acebb5cb78 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1384,6 +1384,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
             }
             // CraftBukkit end
             if (!teleportTransition.asPassenger()) {
+                this.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.TELEPORT; // EMC - DismountReason API
                 this.removeVehicle();
             }
 
@@ -1959,10 +1960,11 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
 
     public void disconnect() {
         this.disconnected = true;
-        this.ejectPassengers();
+        this.ejectPassengers(org.bukkit.event.entity.EntityDismountEvent.DismountReason.DISCONNECT); // EMC - DismountReason API
 
         // Paper start - Workaround vehicle not tracking the passenger disconnection dismount
         if (this.isPassenger() && this.getVehicle() instanceof ServerPlayer) {
+            this.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.DISCONNECT; // EMC - DismountReason API
             this.stopRiding();
         }
         // Paper end - Workaround vehicle not tracking the passenger disconnection dismount
@@ -2160,6 +2162,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
             this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, gameMode.getId()));
             if (gameMode == GameType.SPECTATOR) {
                 this.removeEntitiesOnShoulder();
+                this.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.SPECTATE; // EMC - DismountReason API
                 this.stopRiding();
                 EnchantmentHelper.stopLocationBasedEffects(this);
             } else {
diff --git a/net/minecraft/server/players/PlayerList.java b/net/minecraft/server/players/PlayerList.java
index b1524279c02cd3be82338a6bd0320cb125a134d5..9a5d2af3f070549b4c6aca699299d847ac5a77c7 100644
--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -545,6 +545,7 @@ public abstract class PlayerList {
             Entity rootVehicle = player.getRootVehicle();
             if (rootVehicle.hasExactlyOnePlayerPassenger()) {
                 LOGGER.debug("Removing player mount");
+                player.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.DISCONNECT; // EMC - DismountReason API
                 player.stopRiding();
                 rootVehicle.getPassengersAndSelf().forEach(entity -> {
                     // Paper start - Fix villager boat exploit
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index 2831d1c151976ee7c39ac11ac8ca8c84ffb676d6..cb9182f0640eb50846a2397e5612ff9a80d73d33 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -849,6 +849,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         if (firstTick && this instanceof net.minecraft.world.entity.NeutralMob neutralMob) neutralMob.tickInitialPersistentAnger(level); // Paper - Prevent entity loading causing async lookups
         this.inBlockState = null;
         if (this.isPassenger() && this.getVehicle().isRemoved()) {
+            this.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.DEAD_VEHICLE; // EMC - DismountReason API
             this.stopRiding();
         }
 
@@ -3221,6 +3222,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 }
                 // CraftBukkit end
                 if (this.isPassenger()) {
+                    this.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.TRANSFER; // EMC - DismountReason API
                     this.stopRiding();
                 }
 
@@ -3242,7 +3244,13 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
 
     public void ejectPassengers() {
+        // EMC start - DismountReason API
+        ejectPassengers(org.bukkit.event.entity.EntityDismountEvent.DismountReason.UNKNOWN);
+    }
+    public void ejectPassengers(org.bukkit.event.entity.EntityDismountEvent.DismountReason reason) {
         for (int i = this.passengers.size() - 1; i >= 0; i--) {
+            this.passengers.get(i).dismountReason = reason;
+            // EMC end - DismountReason API
             this.passengers.get(i).stopRiding();
         }
     }
@@ -3297,6 +3305,10 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
     protected boolean removePassenger(Entity passenger, boolean suppressCancellation) { // CraftBukkit
         // Paper end - Force entity dismount during teleportation
+        // EMC start - DismountReason API
+        org.bukkit.event.entity.EntityDismountEvent.DismountReason dismountReason = passenger.dismountReason;
+        passenger.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.UNKNOWN;
+        // EMC end - DismountReason API
         if (passenger.getVehicle() == this) {
             throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
         } else {
@@ -3319,7 +3331,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 }
             }
 
-            org.bukkit.event.entity.EntityDismountEvent event = new org.bukkit.event.entity.EntityDismountEvent(passenger.getBukkitEntity(), this.getBukkitEntity(), !suppressCancellation); // Paper - Force entity dismount during teleportation
+            org.bukkit.event.entity.EntityDismountEvent event = new org.bukkit.event.entity.EntityDismountEvent(passenger.getBukkitEntity(), this.getBukkitEntity(), !suppressCancellation, dismountReason); // Paper - Force entity dismount during teleportation // EMC - DismountReasonAPI - Add dismountReason
             // Suppress during worldgen
             if (this.valid) {
                 org.bukkit.Bukkit.getPluginManager().callEvent(event);
@@ -3879,6 +3891,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             );
     }
 
+    public org.bukkit.event.entity.EntityDismountEvent.DismountReason dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.UNKNOWN; // EMC - DismountReason API
     public final boolean isInvulnerableToBase(DamageSource damageSource) {
         return this.isRemoved()
             || this.invulnerable && !damageSource.is(DamageTypeTags.BYPASSES_INVULNERABILITY) && !damageSource.isCreativePlayer()
@@ -5156,10 +5169,19 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         }
 
         if (this.removalReason.shouldDestroy()) {
+            this.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.DEAD; // EMC - DismountReason API
             this.stopRiding();
         }
 
         if (this.removalReason != Entity.RemovalReason.UNLOADED_TO_CHUNK) { this.getPassengers().forEach(Entity::stopRiding); } // Paper - rewrite chunk system
+        // EMC start - DismountReason API
+        if (removalReason != RemovalReason.UNLOADED_TO_CHUNK) {
+            this.getPassengers().forEach(entity -> {
+                entity.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.DEAD_VEHICLE; // EMC - Add this
+                entity.stopRiding();
+            }); // Paper - chunk system - don't adjust passenger state when unloading, it's just not safe (and messes with our logic in entity chunk unload)
+        }
+        // EMC end - DismountReason API
         this.levelCallback.onRemove(removalReason);
         this.onRemoval(removalReason);
         // Paper start - Folia schedulers
diff --git a/net/minecraft/world/entity/Leashable.java b/net/minecraft/world/entity/Leashable.java
index eab109f5256bf829dd43174699e79e9a2c6326c0..14ec7089aca7a7b7deab8315499707507672d9b8 100644
--- a/net/minecraft/world/entity/Leashable.java
+++ b/net/minecraft/world/entity/Leashable.java
@@ -352,6 +352,7 @@ public interface Leashable {
         }
 
         if (entity.isPassenger()) {
+            entity.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.LEASH; // EMC - DismountReason API
             entity.stopRiding();
         }
     }
diff --git a/net/minecraft/world/entity/LivingEntity.java b/net/minecraft/world/entity/LivingEntity.java
index 762a13956684489900d230909b96aa99307a3368..d6ee253b8ec8ee735f3ed8d6da4de347e6752871 100644
--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -467,6 +467,7 @@ public abstract class LivingEntity extends Entity implements Attackable, Waypoin
                 }
 
                 if (this.isPassenger() && this.getVehicle() != null && this.getVehicle().dismountsUnderwater()) {
+                    this.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.WATER; // EMC - DismountReason API
                     this.stopRiding();
                 }
             } else if (this.getAirSupply() < this.getMaxAirSupply()) {
@@ -4408,6 +4409,7 @@ public abstract class LivingEntity extends Entity implements Attackable, Waypoin
 
     public void startSleeping(BlockPos pos) {
         if (this.isPassenger()) {
+            if (this instanceof net.minecraft.world.entity.player.Player) this.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.PLAYER; // EMC - DismountReason API
             this.stopRiding();
         }
 
diff --git a/net/minecraft/world/entity/player/Player.java b/net/minecraft/world/entity/player/Player.java
index e1e1cac0a3a16ed9220076d9fde0baafac827d4c..63f34d4289b1efdd4d31c488025ceebaf055a99e 100644
--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -579,6 +579,7 @@ public abstract class Player extends LivingEntity {
     @Override
     public void rideTick() {
         if (!this.level().isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
+            this.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.PLAYER; // EMC - DismountReason API
             this.stopRiding();
             // CraftBukkit start - SPIGOT-7316: no longer passenger, dismount and return
             if (!this.isPassenger()) {
diff --git a/net/minecraft/world/item/consume_effects/TeleportRandomlyConsumeEffect.java b/net/minecraft/world/item/consume_effects/TeleportRandomlyConsumeEffect.java
index 56dac4f7c4a1e8fe830bb3da807d2ea06bf2fb7c..a38b4cf170cd2518ca3db9bf137c7484db5ac9a2 100644
--- a/net/minecraft/world/item/consume_effects/TeleportRandomlyConsumeEffect.java
+++ b/net/minecraft/world/item/consume_effects/TeleportRandomlyConsumeEffect.java
@@ -51,6 +51,7 @@ public record TeleportRandomlyConsumeEffect(float diameter) implements ConsumeEf
             );
             double d2 = entity.getZ() + (entity.getRandom().nextDouble() - 0.5) * this.diameter;
             if (entity.isPassenger()) {
+                entity.dismountReason = org.bukkit.event.entity.EntityDismountEvent.DismountReason.TELEPORT; // EMC - DismountReason API
                 entity.stopRiding();
             }
 
