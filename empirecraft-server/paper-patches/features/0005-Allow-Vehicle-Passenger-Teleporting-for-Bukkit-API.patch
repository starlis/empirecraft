From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 10 Apr 2016 22:50:33 -0400
Subject: [PATCH] Allow Vehicle/Passenger Teleporting for Bukkit API

If Bukkit teleport is called, teleport the whole set of entities together and maintain the chain.

diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index d9f3052cf38bc3e91084d29b82b43b689024d87e..0f4df6554dd1e5a7208ce2495ab5a86d4ebb955d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -285,6 +285,64 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         this.entity.setYHeadRot(yaw);
     }
 
+    // EMC start - vehicle passenger teleporting
+    private static CraftEntity teleportingEntity;
+    private CraftEntity storedRoot;
+    private com.google.common.collect.ImmutableList<CraftEntity> storedPassengers;
+    void detachEntities() {
+        if (teleportingEntity == null) {
+            teleportingEntity = this;
+            this.storedRoot = entity.getRootVehicle().getBukkitEntity();
+            this.storedRoot.detachEntities();
+            teleportingEntity = null;
+            return;
+        }
+        this.storedPassengers = this.entity.passengers.stream().map(Entity::getBukkitEntity).collect(com.google.common.collect.ImmutableList.toImmutableList());
+        this.forceEjectPassengers();
+        for (CraftEntity ent : this.storedPassengers) {
+            ent.detachEntities();
+        }
+    }
+    void forceEjectPassengers() {
+        for (int i = this.entity.passengers.size() - 1; i >= 0; --i) {
+            Entity passenger = (this.entity.passengers.get(i));
+            passenger.vehicle = null;
+        }
+        this.entity.passengers = com.google.common.collect.ImmutableList.of();
+    }
+    void teleportAndReattachEntities(Location location) {
+        if (teleportingEntity == null) {
+            if (this.storedRoot != null) {
+                teleportingEntity = this;
+                this.storedRoot.teleportAndReattachEntities(location);
+                this.storedRoot.reattachPassengers();
+                this.storedRoot = null;
+                teleportingEntity = null;
+            }
+            return;
+        }
+        if (!teleportingEntity.equals(this)) {
+            this.teleportEntity(location);
+        }
+        for (CraftEntity ent : this.storedPassengers) {
+            ent.teleportAndReattachEntities(location);
+        }
+    }
+    void teleportEntity(Location location) {
+        this.entity.teleportTo(((CraftWorld) location.getWorld()).getHandle(), location.getX(), location.getY(), location.getZ(), Set.of(), location.getYaw(), location.getPitch(), true);
+    }
+    private void reattachPassengers() {
+        if (this.storedPassengers == null) {
+            return;
+        }
+        this.entity.passengers = this.storedPassengers.stream().map(CraftEntity::getHandle).collect(com.google.common.collect.ImmutableList.toImmutableList());
+        for (CraftEntity passenger : this.storedPassengers) {
+            passenger.getHandle().vehicle = this.getHandle();
+            passenger.reattachPassengers();
+        }
+        this.storedPassengers = null;
+    }
+    // EMC end - vehicle passenger teleporting
     @Override
     public boolean teleport(Location location) {
         return this.teleport(location, TeleportCause.PLUGIN);
@@ -306,12 +364,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         boolean dismount = !flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_VEHICLE);
         boolean retainPassengers = flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_PASSENGERS);
         // Don't allow teleporting between worlds while keeping passengers
-        if (flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_PASSENGERS) && this.entity.isVehicle() && location.getWorld() != this.getWorld()) {
+        if (false && flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_PASSENGERS) && this.entity.isVehicle() && location.getWorld() != this.getWorld()) { // EMC - Allow teleporting cross-world with vehicles
             return false;
         }
 
         // Don't allow to teleport between worlds if remaining on vehicle
-        if (!dismount && this.entity.isPassenger() && location.getWorld() != this.getWorld()) {
+        if (false && !dismount && this.entity.isPassenger() && location.getWorld() != this.getWorld()) { // EMC - Allow teleporting cross-world with vehicles
             return false;
         }
         // Paper end
@@ -333,18 +391,21 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
         // If this entity is riding another entity, we must dismount before teleporting.
         if (dismount) this.entity.stopRiding(); // Paper - Teleport passenger API
+        this.detachEntities(); // EMC
 
         // Let the server handle cross world teleports
         if (location.getWorld() != null && !location.getWorld().equals(this.getWorld())) {
             // Prevent teleportation to an other world during world generation
             Preconditions.checkState(!this.entity.generation, "Cannot teleport entity to an other world during world generation");
             this.entity.teleport(new TeleportTransition(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3(location), Vec3.ZERO, location.getPitch(), location.getYaw(), Set.of(), TeleportTransition.DO_NOTHING, TeleportCause.PLUGIN));
+            this.teleportAndReattachEntities(location); // EMC
             return true;
         }
 
         // entity.snapTo() throws no event, and so cannot be cancelled
         this.entity.snapTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch()); // Paper - use proper moveTo, as per vanilla teleporting
 
+        this.teleportAndReattachEntities(location); // EMC
         // Ensure passengers of entity are teleported
         if (retainPassengers && this.entity.isVehicle()) this.entity.teleportPassengers();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index a7acbe9db097922fee9463c6cec00f3c51db7645..dde2c55081589fc5c6f8e22204e5cf79b8a40187 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1382,12 +1382,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player, PluginMessa
         Preconditions.checkArgument(location.getWorld() != null, "location.world");
         // Paper start - Teleport passenger API
         // Don't allow teleporting between worlds while keeping passengers
-        if (ignorePassengers && entity.isVehicle() && location.getWorld() != this.getWorld()) {
+        if (false && ignorePassengers && entity.isVehicle() && location.getWorld() != this.getWorld()) { // EMC - we can teleport between worlds with passengers
             return false;
         }
 
         // Don't allow to teleport between worlds if remaining on vehicle
-        if (!dismount && entity.isPassenger() && location.getWorld() != this.getWorld()) {
+        if (false && !dismount && entity.isPassenger() && location.getWorld() != this.getWorld()) { // EMC - we can teleport between worlds with passengers
             return false;
         }
         // Paper end
@@ -1441,6 +1441,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player, PluginMessa
             this.getHandle().closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.TELEPORT); // Paper - Inventory close reason
         }
 
+        this.detachEntities(); // EMC
         // Check if the fromWorld and toWorld are the same.
         if (fromWorld == toWorld) {
             // Paper start - Teleport API
@@ -1457,8 +1458,20 @@ public class CraftPlayer extends CraftHumanEntity implements Player, PluginMessa
             // The respawn reason should never be used if the passed location is non null.
             this.server.getHandle().respawn(entity, true, Entity.RemovalReason.CHANGED_DIMENSION, null, to);
         }
+        this.teleportAndReattachEntities(location); // EMC
         return true;
     }
+    // EMC start
+    @Override
+    void teleportEntity(Location location) {
+        ServerPlayer entity = this.getHandle();
+        if (getWorld().equals(location.getWorld())) {
+            entity.connection.teleport(location);
+        } else {
+            this.server.getHandle().respawn(entity, true, Entity.RemovalReason.CHANGED_DIMENSION, null, location);
+        }
+    }
+    // EMC end
 
     @Override
     public void setSneaking(boolean sneak) {
